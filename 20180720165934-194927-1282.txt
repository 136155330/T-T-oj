#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
using namespace std;
int n,m;
const int MAXN =15;
char maps[MAXN][MAXN];
int vids[MAXN][MAXN];///0 代表还没走 1代表走过了
typedef struct NODE
{
    int x;
    int y;
    int step;
} node;
vector<node>vec;
int moves[4][2]= {{-1,0},{1,0},{0,-1},{0,1}}; ///上 下 左 右
bool judge(int i,int j)
{
    if(i<=0||j<=0||vids[i][j]==1||maps[i][j]=='.'||i>n||j>m)
        return false;
    else
        return true;
}
int bfs(node a,node b)
{
    int cnt=-1;
    queue<node>que;
    memset(vids,0,sizeof(vids));
    while(!que.empty())
    {
        que.pop();
    }
    que.push(a);
    que.push(b);
    vids[a.x][a.y]=1;
    vids[b.x][b.y]=1;
    while(!que.empty())
    {
        //printf("..\n");
        node begins;
        begins=que.front();
        cnt=max(begins.step,cnt);
        //printf("cnt=%d x=%d y=%d\n",cnt,begins.x,begins.y);
        que.pop();
        node ends;
        for(int i=0; i<4; i++)
        {
            int a=begins.x+moves[i][0];
            int b=begins.y+moves[i][1];
            if(judge(a,b)==true)
            {
                ends.x=a;
                ends.y=b;
                ends.step=begins.step+1;
                que.push(ends);
                vids[a][b]=1;
            }
        }
    }
    return cnt;
}
int main()
{
    int t;
    int cas=0;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&n,&m);
        vec.clear();
        memset(vids,0,sizeof(vids));
        getchar();
        for(int i=1; i<=n; i++)
        {
            gets(&maps[i][1]);
        }
//        for(int i=1;i<=n;i++)
//        {
//            for(int j=1;j<=m;j++)
//            {
//                printf("%c",maps[i][j]);
//            }
//            puts("");
//        }
        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<=m; j++)
            {
                if(maps[i][j]=='#')
                {
                    node ans;
                    ans.step=0;
                    ans.x=i;
                    ans.y=j;
                    vec.push_back(ans);
                }
            }
        }
        if(vec.size()<=2)
        {
            printf("Case %d: 0\n",++cas);
        }
        else
        {
            int result=0x3f3f3f3f;
            for(int i=0; i<vec.size(); i++)
            {
                for(int j=i+1; j<vec.size(); j++)
                {
                    /**
                    得求最短时间了啊
                    **/
                    int re=bfs(vec[i],vec[j]);
                    bool flags=true;
                    for(int i=1; i<=n; i++)
                    {
                        for(int j=1; j<=m; j++)
                        {
                            if(maps[i][j]=='#'&&vids[i][j]==0)
                            {
                                flags=false;
                                break;
                            }
                        }
                        if(!flags)
                            break;
                    }
                    if(flags)
                    {
                        result=min(re,result);
                    }
                }
            }
            if(result==0x3f3f3f3f)
            {
                printf("Case %d: -1\n",++cas);
            }
            else
            {
                printf("Case %d: %d\n",++cas,result);
            }
        }
    }
    return 0;
}
