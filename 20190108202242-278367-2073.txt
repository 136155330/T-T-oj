#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <vector>
#include <cmath>
using namespace std;
const double PI = acos(-1.0);
const int MAXN = 10000 + 5;
#pragma GCC optimize(2)
inline void Read(int &x)
{
    char c=getchar();
    x=0;
    while (c<'0'||c>'9')
    {
        c=getchar();
    }
    while (c>='0'&&c<='9')
    {
        x=x*10+c-'0';
        c=getchar();
    }
}
/**
 二维向量旋转公式
 [x*cosA-y*sinA  x*sinA+y*cosA]
 那不就变成了线段树区间更新了吗？
 
 搞一个角度的线段树对区间的值进行维护
 记录每条边的一开始的x，y这样的话
 在查询的时候直接可以得出结果
 
 因为二维向量公式要确定前一个点的坐标
 然后一直更新
 
 求坐标与线段的样子无关
 **/
typedef struct SEGTREE
{
    int arr[MAXN];
    typedef struct NODE
    {
        double x, y, lazy;
        int l, r;
    }node;
    node tree[MAXN << 2];
    void Init()
    {
        memset(arr, 0, sizeof(arr));///更新数组
        memset(tree, 0, sizeof(tree));
    }
    void build(int root, int l, int r)
    {
        if(l == r)
        {
            tree[root].l = l;
            tree[root].r = r;
            tree[root].x = 0;
            tree[root].y = arr[l];
            return;
        }
        int mid = (l + r) / 2;
        build(root << 1, l, mid);
        build(root << 1 | 1, mid + 1, r);
        tree[root].y = tree[root << 1].y + tree[root << 1 | 1].y;
        tree[root].l = l;
        tree[root].r = r;
        tree[root].lazy = 0;
    }
    void update(int root, int l, int r, double jiaodu)
    {
        if(tree[root].l == l && tree[root].r == r)
        {
            double x, y;
            x = tree[root].x * cos(jiaodu) + tree[root].y * sin(jiaodu);
            y = tree[root].y * cos(jiaodu) - tree[root].x * sin(jiaodu);
            tree[root].x = x;
            tree[root].y = y;
            tree[root].lazy += jiaodu;
            return ;
        }
        int mid = (tree[root].l + tree[root].r) / 2;
        if(tree[root].lazy)
        {
            double x, y;
            x = tree[root << 1].x * cos(tree[root].lazy) + tree[root << 1].y * sin(tree[root].lazy);
            y = tree[root << 1].y * cos(tree[root].lazy) - tree[root << 1].x * sin(tree[root].lazy);
            tree[root << 1].x = x;
            tree[root << 1].y = y;
            tree[root << 1].lazy += tree[root].lazy;
            x = tree[root << 1 | 1].x * cos(tree[root].lazy) + tree[root << 1 | 1].y * sin(tree[root].lazy);
            y = tree[root << 1 | 1].y * cos(tree[root].lazy) - tree[root << 1 | 1].x * sin(tree[root].lazy);
            tree[root << 1 | 1].x = x;
            tree[root << 1 | 1].y = y;
            tree[root << 1 | 1].lazy += tree[root].lazy;
            tree[root].lazy = 0;
        }
        if(r <= mid)
        {
            update(root << 1, l, r, jiaodu);
        }
        else if(mid < l)
        {
            update(root << 1 | 1, l, r, jiaodu);
        }
        else
        {
            update(root << 1, l, mid, jiaodu);
            update(root << 1 | 1, mid + 1, r, jiaodu);
        }
        tree[root].y = tree[root << 1].y + tree[root << 1 | 1].y;
        tree[root].x = tree[root << 1].x + tree[root << 1 | 1].x;
    }
}seg;
int n, m;
seg segtree;
double pre[MAXN];
int main()
{
    while(~scanf("%d%d", &n, &m))
    {
        segtree.Init();
        for(int i = 0; i < n; i ++)
        {
            //scanf("%d", &segtree.arr[i + 1]);
            Read(segtree.arr[i + 1]);
        }
        segtree.build(1, 1, n);
        for(int i = 1; i <= n; i ++)
            pre[i] = PI;
        for(int i = 0; i < m; i ++)
        {
            int a, b;
            scanf("%d%d", &a, &b);
            double rad;
            rad = ((b * 1.0) / 360.0) * 2.0 * PI;
            segtree.update(1, a + 1, n, pre[a] - rad);
            pre[a] = rad;
            printf("%.2f %.2f\n", segtree.tree[1].x, segtree.tree[1].y);
        }
    }
    return 0;
}
