#include <bits/stdc++.h>

using namespace std;
const int maxn = 2005;
const int maxm = maxn*maxn/2;

int col[maxn];
int t,n,m,x,y,sum,ok;

struct Edge {
    int to,w,next;
} edge[maxm];

int first[maxn], sign;

void init() {
    for(int i = 1; i <= n; i ++ ) {
        first[i] = 0;
    }
    sign = 1;
}

void add_edge(int u,int v,int w) {
    edge[sign].to = v;
    edge[sign].w  = w;
    edge[sign].next = first[u];
    first[u] = sign ++;
}

bool bfs(int s) {
    queue<int>que;
    que.push(s);
    col[s] = 1;
    while(!que.empty()) {
        int now = que.front();
        que.pop();
        for(int i = first[now]; i ; i = edge[i].next) {
            int to = edge[i].to;
            ///如果没法访问过点，点属于的集合和上一个点的集合相反。
            if(col[to] == -1) {
                que.push(to);
                col[to] = !col[now];
            }
            ///如果点!=-1,点被访问过，只要判断是否矛盾即可
            else if(col[to] == col[now]) {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    int cas = 1;
    scanf("%d",&t);
    while(t--) {
        init();
        scanf("%d %d",&n,&m);
        sum = 0;
        for(int i = 1; i <= m; i ++ ) {
            scanf("%d %d",&x,&y);
            add_edge(x,y,1);
            add_edge(y,x,1);
        }
        ///判断是否是二分图
        memset(col,-1,sizeof(col));
        ok = 1;
        for(int i = 1; i <= n; i ++ ) {
            if(col[i] == -1 && !bfs(i)) {
                ok = 0;
                break;
            }
        }
        if(ok) {
            printf("Scenario #%d:\n",cas++);
            printf("No suspicious bugs found!\n\n");
        }
        else {
            printf("Scenario #%d:\n",cas++);
            printf("Suspicious bugs found!\n\n");
        }
    }

    return 0;
}