#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
#include<queue>
#include<set>
using namespace std;
const int N = 1000100;
const int M = 2000050;
int a[N];
int n,m;
struct Edge
{
    int to, next;

};
Edge edge[M];
int first[N],len;
void init()
{

    memset(first,0xff,sizeof(first));
    len=0;
}
void addedge(int x,int y)
{
    edge[len].to=y;
    edge[len].next=first[x];
    first[x]=len++;
}

int L[N],R[N],Time;
int b[N];
void dfs(int u,int pa)
{
    L[u]=++Time;
    b[Time]=a[u];
    for (int i=first[u];~i;i=edge[i].next)
    {
        if (edge[i].to==pa)   continue;
        dfs(edge[i].to,u);
    }
    R[u]=Time;
}

int BLOCK_SIZE=1024;
struct Query
{
    int l,r,p;
    inline bool operator <(const Query &y)
    {
        if (l/BLOCK_SIZE<y.l/BLOCK_SIZE)
            return 1;
        if (l/BLOCK_SIZE>y.l/BLOCK_SIZE)
            return 0;
        return ((l/BLOCK_SIZE)&1)?r<y.r:r>y.r;
    }

};

Query que[N];
int ans[N],cnt[N];
int answer;
int curL,curR;

void add(int x)
{
    cnt[b[x]]++;
    if (cnt[b[x]]==1) ++answer;
}
void del(int x)
{
    cnt[b[x]]--;
    if (cnt[b[x]]==0) --answer;
}
int main()
{
    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;++i)
    {
        scanf("%d",&a[i]);
        b[i]=a[i];
    }
    sort(b+1,b+n+1);
    for (int i=1;i<=n;++i)
    {
        a[i]=lower_bound(b+1,b+n+1,a[i])-b;
    }
    
    init();
    int x,y;
    for (int i=1;i<n;++i)
    {
        scanf("%d%d",&x,&y);
        addedge(x,y);
        addedge(y,x);
    }
    Time=0;
    dfs(1,-1);
    for (int i=1;i<=m;++i)
    {
        scanf("%d",&x);
        que[i].l=L[x],que[i].r=R[x];
        que[i].p=i;
    }
    
    sort(que+1,que+m+1);
    answer=0;
    curL=1,curR=0;
    for (int i=1;i<=m;++i)
    {
        while(curL>que[i].l)   add(--curL);
        while(curL<que[i].l)   del(curL++);
        while(curR<que[i].r)   add(++curR);
        while(curR>que[i].r)   del(curR--);
        ans[que[i].p]=answer;
    }
    for (int i=1;i<=m;++i)
    {
        printf("%d\n",ans[i]);
    }
    return 0;
}