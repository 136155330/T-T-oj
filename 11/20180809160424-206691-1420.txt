#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
const int MAXN = 20;
const int inf = 0xfffffff;
int s,t;
typedef struct EDGE
{
    int to,w,next;
} edge;
edge maps[MAXN*1005];///¥Ê±ﬂ
int head[MAXN];///µ„
//int next[MAXN];
int cnt=0;
void Init()
{
    cnt=0;
    memset(head,-1,sizeof(head));
    //memset(next,-1,sizeof(head));
    memset(maps,0,sizeof(maps));
}
void add_edge(int u,int v,int w)
{
    maps[cnt].to=v;
    maps[cnt].w=w;
    maps[cnt].next=head[u];
    head[u]=cnt++;
}
void add(int u,int v,int w)
{
    add_edge(u,v,w);
    add_edge(v,u,0);
}
int deaph[MAXN];///∑÷≤„Õº
void init_deaph()
{
    memset(deaph,-1,sizeof(deaph));
}
int bfs()
{
    //printf(",,,,\n");
    init_deaph();
    queue<int>que;
    que.push(s);
    deaph[s]=0;
    while(!que.empty())
    {
        int begins=que.front();
        que.pop();
        for(int i=head[begins]; ~i; i=maps[i].next)
        {
            int ends=maps[i].to;
            if(deaph[ends]==-1&&maps[i].w>0)
            {
                deaph[ends]=deaph[begins]+1;
                que.push(ends);
            }
        }
    }
    return deaph[t]!=-1;
}
int dfs(int uu,int exp)
{
    //printf("????\n");
    if(uu==t)
    {
        return exp;
    }
    int flow=0;
    int tmp=0;
    for(int i=head[uu]; i!=-1; i=maps[i].next)
    {
        int v=maps[i].to;
        if((deaph[v]==deaph[uu]+1)&&(maps[i].w>0))
        {
            tmp=dfs(v,min(exp,maps[i].w));
            if(!tmp)
                continue;
            exp-=tmp;
            flow+=tmp;
            maps[i].w-=tmp;
            maps[i^1].w+=tmp;
        }
        if(exp<=0)
            break;
    }
    return flow;
}
void dinic(int &ans)
{
    while(bfs())
    {//printf("..\n");
        ans+=dfs(s,inf);
    }
}
int main()
{
    int T;
    int flag=0;
    scanf("%d",&T);
    while(T--)
    {
        int n,m;
        int result=0;
        scanf("%d%d",&n,&m);
        Init();
        int x,y,c;
        s=1;
        t=n;
        for(int i=0; i<m; i++)
        {
            scanf("%d%d%d",&x,&y,&c);
            add(x,y,c);
        }
        //printf("..\n");
        dinic(result);
        printf("Case %d: %d\n",++flag,result);
    }
    return 0;
}
