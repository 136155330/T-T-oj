#include<cstdio>
#include<cstring>
#include<iostream>
#include<queue>
#include<vector>
#include<iostream>
using namespace std;
int n,m;
int mo[4][2]= {{-1,0},{1,0},{0,-1},{0,1}};
const int inf =0x3f3f3f3f;
char ms[1005][1005];
int p_t[1005][1005];
int f_t[1005][1005];
int vids[1005][1005];
typedef struct NODE
{
    int x;
    int y;
    int step;
} node;
vector<node>vec;
bool judge(int i,int j)
{
    if(ms[i][j]=='#'||i<=0||j<=0||i>n||j>m||vids[i][j]==1)
        return false;
    else
        return true;
}
void bfs_f()
{
    queue<node>ques;
    while(!ques.empty())
    {
        ques.pop();
    }
    memset(vids,0,sizeof(vids));
    for(int i=0; i<vec.size(); i++)
    {
        vids[vec[i].x][vec[i].y]=1;
        ques.push(vec[i]);
    }
    while(!ques.empty())
    {
        node bes;
        bes=ques.front();
        ques.pop();
        f_t[bes.x][bes.y]=bes.step;
        for(int i=0; i<4; i++)
        {
            node en;
            en.x=bes.x+mo[i][0];
            en.y=bes.y+mo[i][1];
            en.step=bes.step+1;
            if(judge(en.x,en.y))
            {
                ques.push(en);
                vids[en.x][en.y]=1;
            }
        }
    }
}
void bfs_p(node a,int math[][1005])
{
    memset(vids,0,sizeof(vids));
    vids[a.x][a.y]=1;
    queue<node>que;
    while(!que.empty())
        que.pop();
    que.push(a);
    while(!que.empty())
    {
        node bes=que.front();
        que.pop();
        math[bes.x][bes.y]=bes.step;
        for(int i=0; i<4; i++)
        {
            node en;
            en.x=bes.x+mo[i][0];
            en.y=bes.y+mo[i][1];
            en.step=bes.step+1;
            if(judge(en.x,en.y))
            {
                que.push(en);
                vids[en.x][en.y]=1;
            }
        }
    }
}
int ress()
{
    int res=inf;
    for(int j=1; j<=m; j++)
    {
        if(f_t[1][j]>p_t[1][j]&&ms[1][j]!='#')
        {
            res=min(res,p_t[1][j]);
        }
    }
    for(int i=1; i<=n; i++)
    {
        if(f_t[i][1]>p_t[i][1]&&ms[i][1]!='#')
        {
            res=min(res,p_t[i][1]);
        }
    }
    for(int j=1; j<=m; j++)
    {
        if(f_t[n][j]>p_t[n][j]&&ms[n][j]!='#')
        {
            res=min(res,p_t[n][j]);
        }
    }
    for(int i=1; i<=n; i++)
    {
        if(f_t[i][m]>p_t[i][m]&&ms[i][m]!='#')
        {
            res=min(res,p_t[i][m]);
        }
    }
    return res;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&n,&m);
        vec.clear();
        memset(vids,0,sizeof(vids));
        memset(ms,0,sizeof(ms));
        for(int i=0; i<1005; i++)
            for(int j=0; j<1005; j++)
                p_t[i][j]=inf;
        for(int i=0; i<1005; i++)
            for(int j=0; j<1005; j++)
                f_t[i][j]=inf;
        for(int i=1; i<=n; i++)
        {
            scanf("%s",&ms[i][1]);
        }
        node a,b;
        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<=m; j++)
            {
                if(ms[i][j]=='J')
                {
                    a.x=i;
                    a.y=j;
                    a.step=0;
                }
                if(ms[i][j]=='F')
                {
                    b.x=i;
                    b.y=j;
                    b.step=0;
                    vec.push_back(b);
                }
            }
        }
        bfs_p(a,p_t);
        bfs_f();
        int re=ress();
        if(re==inf)
            printf("IMPOSSIBLE\n");
        else
            printf("%d\n",re+1);
    }
    return 0;
}
