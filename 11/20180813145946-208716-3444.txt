#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
#include <vector>
#pragma GCC optimize(2)
using namespace std;
priority_queue<int, vector<int>, greater<int> > ques;  // 小顶堆
priority_queue<int, vector<int>, less<int> > que;     // 大顶堆
vector<int>vec;
vector<int>vecs;
bool cmp(const int & a,const int & b)
{
    return a>b;
}

inline void Read(int &x)
{
    char c=getchar();
    x=0;
    while (c<'0'||c>'9')
    {
        c=getchar();
    }
    while (c>='0'&&c<='9')
    {
        x=x*10+c-'0';
        c=getchar();
    }
}
inline void Out(int a)    //输出一个整型
{
    if(a<0)
    {
        putchar('-');
        a=-a;
    }
    if(a>9)
        Out(a/10);
    putchar(a%10+'0');
}
int main()
{
    int n;
    while(~scanf("%d",&n))
    {
        vec.clear();
        vecs.clear();
        int result = 0;
        while(!ques.empty())
            ques.pop();
        while(!que.empty())
            que.pop();
        for(int i = 0; i < n; i ++)
        {
            int anss;
            //scanf("%d",&anss);
            Read(anss);
            vec.push_back(anss);
            vecs.push_back(anss);
        }
        sort(vec.begin(), vec.end(), cmp);
        int j = 0;
        for (int i = 0; i < n; i ++)
        {
            int ans;
            ans = vecs[i];
            if(ques.empty())
            {
                ques.push(ans);
            }
            else if(ques.empty()==false)
            {
                if(ans <= ques.top())
                {
                    //int re = que.size()+ques.size();
                    //result = max(re, result);
                    while(!que.empty())
                    {
                        que.pop();
                    }
                    while(!ques.empty())
                    {
                        ques.pop();
                    }
                    ques.push(ans);
                }
                else if(que.empty() == false && ans <= que.top())
                {
                    //printf("?\n");
                    //printf("%d\n",ans);
                    //int re = que.size() + ques.size();
                    //result = max(re, result);
                    ques.push(ans);

                }
                else if((que.empty() == false) && ans > que.top())
                {
                    que.push(ans);
                    int re = que.size() + ques.size();
                    result = max(re, result);
                    //printf("%d\n",result);
                    if(ans == vec[j])
                    {
                        while(!que.empty())
                        {
                            que.pop();
                        }
                        while(!ques.empty())
                        {
                            ques.pop();
                        }
                        j++;
                    }
                }
                else if(que.empty())
                {
                    que.push(ans);
                    if(ans == vec[j])
                    {
                        while(!que.empty())
                        {
                            que.pop();
                        }
                        while(!ques.empty())
                        {
                            ques.pop();
                        }
                        j++;
                    }
                }
            }
        }
        if(result == 1)
        {
            int aa = 0;
            Out(aa);
            puts("");
        }
        else
        {
            Out(result);
            puts("");
        }
    }
    return 0;
}
