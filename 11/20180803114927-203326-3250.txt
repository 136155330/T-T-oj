#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
const int MAXN = 55;
int n,m,q;
typedef struct EDGE
{
    int from;
    int to;
    int value;
} edge;
vector<edge>vec[MAXN];
void Init()
{
    for(int i=0; i<MAXN; i++)
        vec[i].clear();
}
int pre[MAXN];
void Init_pre()
{
    for(int i=0; i<MAXN; i++)
    {
        pre[i]=i;
    }
}
int acfinds(int x)
{
    if(pre[x]==x)
        return x;
    else
        return pre[x]=acfinds(pre[x]);
}
void join(int a,int b)
{
    int root1=acfinds(a);
    int root2=acfinds(b);
    if(root1!=root2)
    {
        pre[root2]=pre[root1];
    }
}
bool cmp(const edge & a,const edge & b)
{
    return a.value<b.value;
}
bool judge(int l,int r,int p,int c)
{
    bool flag=true;
    int num=0;
    int a;
    for(int i=l; i<=r; i++)
    {
        if(num==0&&i%p==c)
        {
            num++;
            a=acfinds(i);
        }
        if(i%p==c&&num!=0)
        {
            if(acfinds(i)!=a)
            {
                flag=false;
            }
        }
    }
    return flag;
}
int kruskal(int l,int r,int p,int c)
{
    vector<edge>vecs;
    vecs.clear();
    Init_pre();
    for(int i=1; i<=n; i++)
    {
        for(int j=0; j<vec[i].size(); j++)
        {
            vecs.push_back(vec[i][j]);
        }
    }
    sort(vecs.begin(),vecs.end(),cmp);
    int sum=-0x3f3f3f3f;
    for(int i=0; i<vecs.size(); i++)
    {
        if(judge(l,r,p,c))
        {
            break;
        }
        if(acfinds(vecs[i].to)!=acfinds(vecs[i].from))
        {
            join(vecs[i].from,vecs[i].to);
            sum=max(sum,vecs[i].value);
        }

    }
    return sum;
}
int main()
{
    while(~scanf("%d%d%d",&n,&m,&q))
    {
        Init();
        for(int i=0; i<m; i++)
        {
            edge ans;
            scanf("%d%d%d",&ans.from,&ans.to,&ans.value);
            vec[ans.from].push_back(ans);
        }
        int l,r,p,c;
        for(int i=0; i<q; i++)
        {
            scanf("%d%d%d%d",&l,&r,&p,&c);
            int result=kruskal(l,r,p,c);
            if(result!=-0x3f3f3f3f)
                printf("%d\n",result);
            else
                printf("0\n");
        }
    }
    return 0;
}
