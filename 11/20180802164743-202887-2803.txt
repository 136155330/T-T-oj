#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
using namespace std;
const int MAXN = 255;
int pre[MAXN];
typedef struct EDGE
{
    int from;
    int to;
    int value;
} edge;
vector<edge>vec;
void Init()
{
    for(int i=0; i<MAXN; i++)
    {
        pre[i]=i;
    }
    vec.clear();
}
int acfinds(int x)
{
    if(pre[x]==x)
        return x;
    else
        return pre[x]=acfinds(pre[x]);
}
void join(int a,int b)
{
    int root1=acfinds(a);
    int root2=acfinds(b);
    if(root1!=root2)
    {
        pre[root2]=root1;
    }
    return ;
}
bool same(int a,int b)
{
    int x=acfinds(a);
    int y=acfinds(b);
    if(x==y)
        return true;
    else
        return false;
}
bool cmp(const edge &a,const edge &b)
{
    return a.value<b.value;
}
int kruskal(int ans)
{
    int sum=0;
    for(int i=0; i<vec.size(); i++)
    {
        if(same(vec[i].to,vec[i].from)||vec[i].to==ans||vec[i].from==ans)
            continue;
        if(!same(vec[i].from,vec[i].to))
        {
            join(vec[i].to,vec[i].from);
            sum+=vec[i].value;
        }
    }
    return sum;
}
int main()
{
    int n;
    while(~scanf("%d",&n))
    {
        Init();
        for(int i=1; i<=n; i++)
        {
            int v;
            scanf("%d",&v);
            edge ans;
            ans.from=0;
            ans.to=i;
            ans.value=v;
            vec.push_back(ans);
        }
        int q;
        scanf("%d",&q);
        for(int i=0; i<q; i++)
        {
            edge temp;
            scanf("%d%d%d",&temp.from,&temp.to,&temp.value);
            vec.push_back(temp);
        }
        int result=0x7fffffff;
        sort(vec.begin(),vec.end(),cmp);
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<MAXN;j++)
                pre[j]=j;
            int ans=kruskal(i);
            result=min(ans,result);
        }
        printf("%d\n",result);
    }
    return 0;
}
