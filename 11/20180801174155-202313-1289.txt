#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<map>
#include<algorithm>
#include<queue>
using namespace std;
const int MAXN = 4;
//map<string,int>M;///判断有没有走过
typedef struct MYCHAR
{
    char words[60];
    int length=0;
} mychar;
map<string,mychar>RE;///存答案
int moves[4]= {-3,-1,1,3};
char movess[4]= {'u','l','r','d'};
typedef struct NODE
{
    mychar result;
    string temp;
    int where;///标记x的位置
    NODE()
    {
        memset(result.words,0,sizeof(result.words));
        result.length=0;
        temp.clear();
    }
} node;
bool judge(node re)
{
    if(re.temp=="12345678x")
        return true;
    else
        return false;
}
void bfs()
{
    node ans;
    ans.where=8;
    ans.temp="12345678x";
    //M.clear();
    RE.clear();
    queue<node>que;
    while(!que.empty())
        que.pop();
    que.push(ans);
    //M[ans.temp]++;
    RE[ans.temp].words[RE[ans.temp].length++]='l';
     RE[ans.temp].words[RE[ans.temp].length++]='r';
    while(!que.empty())
    {
        node begins;
        begins=que.front();
        que.pop();
//        if(judge(begins))
//        {
//            return begins;
//        }
        for(int i=0; i<4; i++)
        {
            if(begins.where==0||begins.where==3||begins.where==6)
            {
                if(i==1)///l
                    continue;
            }
            if(begins.where==0||begins.where==1||begins.where==2)
            {
                if(i==0)///u
                    continue;
            }
            if(begins.where==2||begins.where==5||begins.where==8)
            {
                if(i==2)///r
                    continue;
            }
            if(begins.where==6||begins.where==7||begins.where==8)
            {
                if(i==3)///d
                    continue;
            }
            node ends;
            node beginss;
            beginss=begins;
            ends.where=beginss.where+moves[i];
            beginss.result.words[beginss.result.length++]=movess[i];
            for(int j=0;j<beginss.result.length;j++)
            {
                ends.result.words[j]=beginss.result.words[j];
            }
            ends.result.length=beginss.result.length;
            if(ends.where<0||ends.where>8)
                continue;
            swap(beginss.temp[ends.where],beginss.temp[beginss.where]);
            ends.temp=beginss.temp;
            if(RE.count(ends.temp))
            {
                continue;
            }
            else
            {
                //M[ends.temp]++;
                RE[ends.temp]=ends.result;
                que.push(ends);
            }
        }
    }
}
int main()
{
    std::ios::sync_with_stdio(false);
    string data;
    int flag;
    bfs();
    char words[25];
    while(gets(words)!=NULL)
    {
        data.clear();
        int len=strlen(words);
        for(int i=0; i<len; i++)
        {
            if(words[i]!=' ')
            {
                data.push_back(words[i]);
            }
        }
        //cout<<data<<endl;
        if(RE.count(data))
        {
            for(int i=RE[data].length; i!=-1; i--)
            {

                if(RE[data].words[i]=='l')
                    cout<<'r';
                if(RE[data].words[i]=='r')
                    cout<<'l';
                if(RE[data].words[i]=='u')
                    cout<<'d';
                if(RE[data].words[i]=='d')
                    cout<<'u';
            }
            cout<<endl;
        }
        else
        {
            cout<<"unsolvable"<<endl;
        }
    }
    return 0;
}
