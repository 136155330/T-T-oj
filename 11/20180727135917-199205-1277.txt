#include<iostream>
#include<cstdio>
#include<cstring>
#define mem(x) memset(x,0,sizeof(x))
#define FOR(i,n) for(int i=1;i<=n;i++)
using namespace std;
const int MAXN = 25;
int sum;
int n,m;
int maps[MAXN][MAXN];
int moves[5][2]= {{0,0},{-1,0},{1,0},{0,-1},{0,1}};
int vids[MAXN];
int result;
int results[MAXN][MAXN];
int re[MAXN][MAXN];
void dfs(int step)
{
    if(step==m+1)
    {
        sum=0;
        mem(results);
        int temp[MAXN][MAXN];
        FOR(i,n)
        {
            FOR(j,m)
            {
                temp[i][j]=maps[i][j];
            }
        }
//        printf(".........\n");
//        FOR(i,n)
//        {
//            FOR(j,m)
//            {
//                printf("%d ",temp[i][j]);
//            }
//            puts("");
//        }
//        printf("...............\n");
        FOR(i,m)
        {
            if(vids[i]==1)
            {
                sum++;
                results[1][i]=1;
                temp[1][i]=!temp[1][i];
                FOR(j,4)
                {
                    int a=1+moves[j][0];
                    int b=i+moves[j][1];
                   // printf("a=%d b=%d\n",a,b);
                    temp[a][b]=!temp[a][b];
                }
//                printf("///////////\n");
//                FOR(i,n)
//                {
//                    FOR(j,m)
//                    {
//                        printf("%d ",temp[i][j]);
//                    }
//                    puts("");
//                }
//                printf("//////////\n");
            }
        }
        for(int i=2; i<=n; i++)
        {
            FOR(j,m)
            {
                if(temp[i-1][j]==1)
                {
                    temp[i][j]=!temp[i][j];
                    sum++;
                    results[i][j]=1;
                    FOR(z,4)
                    {
                        int a=i+moves[z][0];
                        int b=j+moves[z][1];
                        temp[a][b]=!temp[a][b];
//                        printf("a=%d. b=%d.\n",a,b);
                    }
                }
            }
        }
//        printf("!\n");
//        FOR(i,n)
//        {
//            FOR(j,m)
//            {
//                printf("%d ",temp[i][j]);
//            }
//            puts("");
//        }
//        printf("!\n");
        int flag=0;
//        printf("sum=%d result=%d\n",sum,result);
        FOR(i,m)
        {
            if(temp[n][i]==1)
            {
                flag=1;
                break;
            }
        }
        if(flag)
            return ;
        else
        {
            //printf("...\n");
//        FOR(i,n)
//        {
//            FOR(j,m)
//            {
//                printf("%d ",results[i][j]);
//            }
//            puts("");
//        }
            if(sum<result)
            {
                result=sum;
                //printf("%d\n",result);
                FOR(i,n)
                {
                    FOR(j,m)
                    {
                        re[i][j]=results[i][j];
                    }
                }
            }
            else if(sum>result)
            {
                return ;
            }
            else if(sum==result)
            {
                result=sum;
                string a;
                string b;///½á¹û
                FOR(i,n)
                {
                    FOR(j,m)
                    {
                        char w[5]= {0};
                        //mem(w);
                        w[0]=(results[i][j]-0)+'0';
                        a.append(w);
                        w[0]=(re[i][j]-0)+'0';
                        b.append(w);
                    }
                }
                if(b>a)
                {
                    FOR(i,n)
                    {
                        FOR(j,m)
                        {
                            re[i][j]=results[i][j];
                        }
                    }
                }
            }
        }
        return ;
    }
    else
    {
        vids[step]=1;
        dfs(step+1);
        vids[step]=0;
        dfs(step+1);
    }
}

int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        mem(maps);
        mem(vids);
        sum=0;
        result=0x3f3f3f3f;
        FOR(i,n)
        {
            FOR(j,m)
            {
                scanf("%d",&maps[i][j]);
            }
        }
        dfs(1);
        if(result==0x3f3f3f3f)
            printf("IMPOSSIBLE\n");
        else
        {
            FOR(i,n)
            {
                FOR(j,m)
                {
                    printf("%d ",re[i][j]);
                }
                puts("");
            }
        }
    }
    return 0;
}
