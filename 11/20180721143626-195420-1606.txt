#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
using namespace std;
const int MAXN = 100005;
template <typename T>
inline int read(T &x) {
    char c = getchar();
    bool f;
    if(c == EOF)
        return 0;
    while(c != '-' && (c < '0' || c > '9'))
        c = getchar();
    if(c == '-')
        f = true, x = 0;
    else
        f = false, x = c - '0';
    while((c = getchar()) >= '0' && c <= '9')
        x = x * 10 + c - '0';
    if(f)
        x = -x;
    return 1;
}

template <typename T>
inline void out(T x) {
    static char ans[20];
    int t = 0;
    if(x < 0)
        putchar('-'), x = -x;
    while(x)
        ans[++t] = x % 10 + '0', x /= 10;
    while(t)
        putchar(ans[t--]);
}

priority_queue<int>que;
map<int,int>M;
void clears() {
    while(!que.empty()) {
        que.pop();
    }
}
void putss(priority_queue<int>q) {
    while(!q.empty()) {
        out(-q.top());
        q.pop();
        putchar(' ');
    }
    putchar('\n');
}
int main() {
    int n;
    while(~scanf("%d",&n)) {
        M.clear();
        clears();
        int maxs=-1;
        for(int i=0; i<n; i++) {
            int ans;
            read(ans);
            if(ans==1) {
                int a;
                read(a);
                if(M.count(a)) {
                    int tmp = ++M[a];
                    if(tmp>maxs) {
                        clears();
                        //vec.push_back(a);
                        que.push(-a);
                        maxs=tmp;
                    } else if(tmp==maxs) {
                        que.push(-a);
                        //vec.push_back(a);
                    }
                } else {
                    M[a] = 1;
                    int tmp = 1;
                    if(tmp>maxs) {
                        //vec.clear();
                        //vec.push_back(a);
                        clears();
                        que.push(-a);
                        maxs=tmp;
                    } else if(tmp==maxs) {
                        que.push(-a);
                        //vec.push_back(a);
                    }
                }
            } else {
                //sort(vec.begin(),vec.end());
//                for(int i=0; i<vec.size(); i++)
//                {
//                    if(i!=vec.size()-1)
//                        {
//                            out(vec[i]);
//                            putchar(' ');
//                        }
//                    else
//                        {
//                            out(vec[i]);
//                            putchar('\n');
//                        }
//                }
                putss(que);
            }
        }
    }
    return 0;
}