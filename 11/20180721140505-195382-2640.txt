#include<cstdio>
#include<cstring>
#include<queue>
#include<algorithm>
#include<cmath>
#include<vector>
using namespace std;
typedef long long ll;
ll a[1005],b[1005];
ll lcm(ll a,ll b)
{
    return a*b/__gcd(a,b);
}
void exgcd(ll a,ll b,ll &d,ll &x,ll &y)/// d是最小公倍数， x,y是方程 a*x+b*y=d 的系数
{
    if(b==0)
    {
        /// 当 d=a; 时  a*1+b*0=d
        x=1;
        y=0;
        d=a;
    }
    else
    {
        ll x0,y0;
        exgcd(b,a%b,d,x0,y0);
        x=y0;
        y=x0-(a/b)*y0;
    }
}
ll solve_equation(ll a,ll mod,ll rem) /// 解线性同余方程 a*x%mod=rem  的最小非负整数解
{
    /// 将系数进行标准化到[0,mod)
    a=(a%mod+mod)%mod;
    rem=(rem%mod+mod)%mod;
    ///  a*x+mod*y=rem
    ll x,y,d;
    exgcd(a,mod,d,x,y);
    if(rem%d==0)
    {
         /// a*x+mod*y=d
         ll k=(rem/d);
         /// a*x*k+mod*y*k=d*k=rem
         x=x*k;/// 得到一个特解
//         a*(x+t)%mod=a*x%mod
//         a*x+a*t%mod=a*x%mod
//         a*t%mod=0;
//         a*t=lcm(a,mod);
//         t=lcm(a,mod)/a
//         t=a*mod/gcd(a,mod)/a=mod/gcd(a,mod);
         ll t=mod/d;/// 求解的周期
         x=(x%t+t)%t;/// 求最小非负整数解。
         return x;
    }
    return -1;
}
int last;
int main()
{
    int n,m,i,j,k,t;
    long long T,x0;
    while(scanf("%d",&n)!=EOF)
    {

        T=1;
        for(i=1;i<=n;i++)
        {
            scanf("%lld%lld",&a[i],&b[i]);
        }
        T=1;
        x0=0;
        for(i=1;i<=n;i++)/// 复杂度log(T)
        {

            //printf("%lld\n",b[i]);
           // printf("[%lld %lld %lld]\n",T,a[i],b[i]-x0);
          /*  for(j=0;j<a[i];j++)///从留下的数中暴力试算
            {
                if((x0+T*j)%a[i]==b[i])
                {
                    break;
                }
            }*/
            ///把暴力试算，换成解线性同余方程的板子
            /// (x0+T*x)%a[i]=b[i]
            /// (T*x)%a[i]=b[i]-x0;
            j=solve_equation(T,a[i],b[i]-x0);
            if(j==-1)
            {
                x0=-1;
                break;
            }
            x0=x0+T*j;
            T=lcm(T,a[i]);///更新周期
        }
        printf("%lld\n",x0);

    }
    return 0;
}