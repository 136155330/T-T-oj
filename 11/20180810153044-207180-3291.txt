/**
rid: 207154
user: 136155330
time: 2018-08-10 14:57:30
result: Wrong Answer
*/
/**
rid: 207149
user: 136155330
time: 2018-08-10 14:55:29
result: Accepted
*/
#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int MAXN = 10005;
const int MAXM = 100005;
const int inf = 0xfffffff;
const int cz = 2000;
typedef struct EDGE
{
    int to,next,cap,flow,cost;
}Edge;
Edge edge[MAXM];
int head[MAXN],tol;
int pre[MAXN],dis[MAXN];
bool vis[MAXN];
int N;
void init(int n)
{
    N=n;
    tol=0;
    memset(head,-1,sizeof(head));
}
void addedge(int u,int v,int cap,int cost)
{
    edge[tol].to=v;
    edge[tol].cap=cap;
    edge[tol].cost=cost;
    edge[tol].flow=0;
    edge[tol].next=head[u];
    head[u]=tol++;
    edge[tol].to=u;
    edge[tol].cap=0;
    edge[tol].cost=-cost;
    edge[tol].flow=0;
    edge[tol].next=head[v];
    head[v]=tol++;
}
bool spfa(int s,int t)
{
    queue<int>q;
    for(int i=0;i<=7000;i++)
    {
        dis[i]=inf;
        vis[i]=false;
        pre[i]=-1;
    }
    dis[s]=0;
    vis[s]=true;
    q.push(s);
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        vis[u]=false;
        for(int i=head[u];i!=-1;i=edge[i].next)
        {
            int v=edge[i].to;
            if(edge[i].cap>edge[i].flow&&dis[v]>dis[u]+edge[i].cost)
            {
                dis[v]=dis[u]+edge[i].cost;
                pre[v]=i;
                if(!vis[v])
                {
                    vis[v]=true;
                    q.push(v);
                }
            }
        }
    }
    if(pre[t]==-1)
        return false;
    else
        return true;
}
int minCostMaxflow(int s,int t,int &cost)
{
    int flow=0;
    cost=0;
    while(spfa(s,t))
    {//printf("..\n");
        int Min=inf;
        for(int i=pre[t];~i;i=pre[edge[i^1].to])
        {
            if(Min>edge[i].cap-edge[i].flow)
            {
                Min=edge[i].cap-edge[i].flow;
            }
        }
        for(int i=pre[t];~i;i=pre[edge[i^1].to])
        {
            edge[i].flow+=Min;
            edge[i^1].flow-=Min;
            cost+=edge[i].cost*Min;
        }
        flow+=Min;
    }
    return flow;
}
int main()
{
    int n,m;
    while(~scanf("%d%d",&n,&m))
    {
        init(n);
        addedge(6000,0,2,0);
        //printf("..\n");
        for(int i=1;i<n-1;i++)
        {
            addedge(i,i+cz,1,0);
        }
        for(int i=0;i<m;i++)
        {
            int a,b,c;
            scanf("%d%d%d",&a,&b,&c);
            if(a==0&&b!=n-1)
            {
                addedge(a,b,1,c);
                //addedge(b,b+cz,1,0);
            }
            else if(b==n-1&&a!=0)
            {
                addedge(a+cz,b,1,c);
            }
            else if(a==0&&b==n-1)
            {
                addedge(a,b,1,c);
            }
            else if(a!=0&&b!=n-1)
            {
             //addedge(a,a+cz,1,0);
             addedge(a+cz,b,1,c);
             //addedge(b,b+cz,1,0);
            }
        }
        //printf("?\n");
        int result,costs=0;
        result=minCostMaxflow(6000,n-1,costs);
        if(result>=2)
        {
            printf("%d\n",costs);
        }
        else
            printf("-1\n");
    }
    return 0;
}
/**
7 8
0 1 1
0 2 1
1 3 1
2 3 1
3 4 1
3 5 1
4 6 1
5 6 1
**/
