#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
/**
kruskal 次小生成树
**/
const int MAXN = 105;
int pre[MAXN];
int vids[100005];
int n,m;
void Init_pre()
{
    for(int i = 0; i < MAXN; i ++)
    {
        pre[i] = i;
    }
}
int acfinds(int x)
{
    if(pre[x] == x)
        return x;
    else
        return pre[x] = acfinds(pre[x]);
}
void join(int a,int b)
{
    int root1 = acfinds(a);
    int root2 = acfinds(b);
    if(root1 != root2)
    {
        pre[root2] = root1;
    }
}
typedef struct EDGE
{
    int from;
    int to;
    int value;
} edge;
vector<edge>vec;
bool cmp(const edge & a,const edge & b)
{
    return a.value < b.value;
}
int kruskal()
{
    int sum=0;
    memset(vids,0,sizeof(vids));
    sort(vec.begin(),vec.end(),cmp);
    for(int i = 0; i < vec.size(); i ++)
    {
        if(acfinds(vec[i].from) != acfinds(vec[i].to) && vids[i] == 0)
        {
            join(vec[i].from,vec[i].to);
            vids[i]=1;
            sum+=vec[i].value;
        }
    }
    return sum;
}
bool judge(edge ans,edge anss)
{
    if(ans.from==anss.from&&ans.to==anss.to&&ans.value==anss.value)
        return true;
    else if(ans.from==anss.to&&ans.to==anss.from&&ans.value==ans.value)
        return true;
    else
        return false;
}
bool judges()
{
    int a = acfinds(1);
    bool flag = true;
    for(int i = 1; i <= m; i ++)
    {
        if(acfinds(i) != a)
        {
            flag = false;
        }
    }
    return flag;
}
int kruskal_second()
{
    int vidss[100005];
    int re=0x3f3f3f3f;
    for(int i = 0; i < vec.size(); i ++)
    {
        if(vids[i] == 1)
        {
            memset(vidss,0,sizeof(vidss));
            vidss[i]=1;
            edge te;
            int sums=0;
            Init_pre();
            for(int j = 0; j < vec.size(); j ++)
            {
                if(vidss[j] == 0)
                {
                    if(acfinds(vec[j].from) != acfinds(vec[j].to) && (judge(te,vec[j]) == false))
                    {
                        join(vec[j].from,vec[j].to);
                        sums+=vec[j].value;
                    }
                }
            }
            if(judges())
            {
                re=min(sums,re);
            }
            else
                continue;
        }
    }
    return re;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&m,&n);
        Init_pre();
        vec.clear();
        for(int i = 0; i < n; i ++)
        {
            edge ans;
            scanf("%d%d%d",&ans.from,&ans.to,&ans.value);
            vec.push_back(ans);
        }
        if(m == 1)
        {
            printf("0\n");
            continue;
        }
        int re1=kruskal();
        int re2=kruskal_second();
        if(re1 == re2)
            printf("Not Unique!\n");
        else
            printf("%d\n",re1);
    }
    return 0;
}

