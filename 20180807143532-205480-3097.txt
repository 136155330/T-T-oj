#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
#define mem(x) memset(x,0,sizeof(x))
using namespace std;
const int MAXN = 100005;
int math[MAXN];
typedef struct NODE
{
    int l;///左端点
    int r;///右端点
    int num;///编号
} node;
node qus[MAXN];
int arr[MAXN];
int belong[MAXN];
int mark[MAXN];///出现次数数组
int result[MAXN];///结果数组
void Init()
{
    mem(qus);
    mem(arr);
    mem(belong);
    mem(mark);
    mem(result);
}
int n,q;
bool cmp(const node &a, const node &b) {
    if(belong[a.l] == belong[b.l]) {
        if(belong[a.l] & 1) {
            return a.r > b.r;
        }
        return a.r < b.r;
    }
    return a.l < b.l;
}
int add(int a)
{
    if(mark[a]==0)
    {
        mark[a]++;
        return 1;
    }
    else
    {
        mark[a]++;
    }
    return 0;
}
int cut(int a)
{
    if(mark[a]==1)
    {
        mark[a]--;
        return 1;
    }
    else
    {
        mark[a]--;
    }
    return 0;
}
//int add(int val) {
//    return mark[val] ++ == 0;
//}
//
//int cut(int val) {
//    return -- mark[val] == 0;
//}

int main()
{
    while(~scanf("%d%d",&n,&q))
    {
        Init();
        int sizes=sqrt(n);
        for(int i=1; i<=n; i++)
        {
            scanf("%d",&arr[i]);
            belong[i]=i/sizes;
        }
        for(int i=0; i<q; i++)
        {
            scanf("%d%d",&qus[i].l,&qus[i].r);
            qus[i].num=i;
        }
        sort(qus,qus+q,cmp);
        int re,rel,rer;
        re=rel=rer=0;
        for(int i=0; i<q; i++)
        {
            while(qus[i].l<rel)
            {
                re+=add(arr[--rel]);
            }
            while(qus[i].l>rel)
            {
                re-=cut(arr[rel++]);
            }
            while(qus[i].r>rer)
            {
                re+=add(arr[++rer]);
            }
            while(qus[i].r<rer)
            {
                re-=cut(arr[rer--]);
            }
            result[qus[i].num]=re;
        }
        for(int i=0; i<q; i++)
        {
            printf("%d\n",result[i]);
        }
    }
    return 0;
}