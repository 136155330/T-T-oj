#include<stdio.h>
#include<string.h>
#define inf 0xfffffff
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
typedef struct NODE
{
    int to;
    int cost;
    friend bool operator < (const NODE &a, const NODE &b) {
        return a.cost > b.cost;
}
}node;
typedef struct Edge
{
    int next;
    int to;
    int w;
} edge;
edge maps[10005];
int head[205];
int dist[205];
int vids[205];
int cnt;
void creat ()
{
    for(int i=0; i<205; i++)
        head[i]=-1;
    cnt=0;
}
void add(int u,int v,int w)
{
    maps[cnt].to=v;
    maps[cnt].w=w;
    maps[cnt].next=head[u];///一开始放置为-1，-1的条件就可以跳出
    ///下一步接着储存,head[u]的值,就是前面的位置
    head[u]=cnt++;///head[u]会得到这条线的值
}
int dijkstra(int s,int t)
{
    for(int i=0; i<205; i++)
    {
        vids[i]=0;
        dist[i]=inf;
    }
    priority_queue<node>que;
    node begins;
    begins.to=s;
    begins.cost=0;
    que.push(begins);
    while(!que.empty())
    {
        node ends=que.top();
        que.pop();
        if(!vids[ends.to])
        {
            vids[ends.to]=1;
            dist[ends.to]=ends.cost;
            for(int i = head[ends.to]; ~i; i = maps[i].next)
            {
                int to = maps[i].to, w = maps[i].w;
                if(!vids[to])
                {
                    node ans;
                    ans.to=to;
                    ans.cost=ends.cost+w;
                    que.push(ans);
                }
            }
        }
    }
        if(dist[t] == inf)
        {
            return -1;
        }
        else
        {
            return dist[t];
        }
}
int main()
{
    int n,m;
    while(~scanf("%d%d",&n,&m)&&n&&m)
    {
        creat();
        int u,v,w;
        for(int i=0; i<m; i++)
        {
            scanf("%d%d%d",&u,&v,&w);
            add(u,v,w);
            add(v,u,w);
        }
        int num=dijkstra(1,n);
        printf("%d\n",num);
    }
    return 0;
}
