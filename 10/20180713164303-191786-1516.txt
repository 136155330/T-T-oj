#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
using namespace std;
const int MAXN = 105;
int n,m;
int in[MAXN];
int result[MAXN];
int temp[MAXN];///中转数组
vector<int>maps[MAXN];///建图
queue<int>que;
bool PD(int u,int v)///判断是否有重复边
{
    for(int i=0; i<maps[u].size(); i++)
    {
        if(maps[u][i]==v)
            return true;
    }
    return false;
}
void INIT()
{
    memset(in,0,sizeof(in));
    for(int i=0; i<MAXN; i++)
        maps[i].clear();
}
int tuposort()
{
    while(!que.empty())
    {
        que.pop();
    }
    for(int i=0; i<n; i++)
    {
        if(in[i]==0)
            que.push(i);
    }
    int flag=0;
    int cnt=0;
    bool re=false;///代表是否多种解
    while(!que.empty())
    {
        if(que.size()>1)
        {
            re=true;
        }
        int ans=que.front();
        que.pop();
        result[cnt++]=ans;
        for(int i=0; i<maps[ans].size(); i++)
        {
            if(--in[maps[ans][i]]==0)
            {
                que.push(maps[ans][i]);
            }
        }
    }
    //printf("cnt=%d %d\n",cnt,re);
    if(cnt<n)
    {
        return 1;
    }
    if(re)
        return 2;
    return 3;
}
int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        if(n==0||m==0)break;
        INIT();
        int hzb;
        bool res=false;
        char a,b,c;
        int uu;
        for(int i=0; i<m; i++)
        {
            //scanf("%c%c%c",&a,&b,&c);
            cin>>a>>b>>c;
            //cout<<a<<b<<c<<'.'<<endl;
            //getchar();
            if(res)
                continue;
            int aa,cc;
            aa=a-'A';
            cc=c-'A';
            if(b=='<'&&!PD(cc,aa))
            {
                maps[cc].push_back(aa);
                in[aa]++;
            }
            else if(b=='>'&&!PD(aa,cc))
            {
                maps[aa].push_back(cc);
                in[cc]++;
            }
            memcpy(temp,in,sizeof(in));
            hzb=tuposort();
            memcpy(in,temp,sizeof(temp));
            if(hzb!=2)
            {
                uu=i;
                res=true;
            }

        }
        if(hzb==1)
        {

            printf("Inconsistency found after %d relations.\n",++uu);
        }
        else if(hzb==3)
        {
            printf("Sorted sequence determined after %d relations: ",++uu);
            for(int i=n-1; i!=-1; i--)
                printf("%c",result[i]+'A');
            printf(".\n");

        }
        else
        {
            printf("Sorted sequence cannot be determined.\n");
        }
    }
    return 0;
}
