#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int MAXN = 200005;
const int INF = 0x3f3f3f3f;
typedef long long ll;
struct SegmentTREE
{
    struct Node{
    int l,r;
    ll sum,Lazy;
    ll maxs;
    }tree[MAXN<<2];
    int num[MAXN];
    inline void push_up(int rt)
    {
        tree[rt].sum=tree[rt<<1].sum+tree[rt<<1|1].sum;
        tree[rt].maxs=max(tree[rt<<1].maxs,tree[rt<<1|1].maxs);
    }
    inline void push_down(int rt)
    {
        if(tree[rt].Lazy)
        {
            tree[rt<<1].Lazy+=tree[rt].Lazy;
            tree[rt<<1|1].Lazy+=tree[rt].Lazy;
            tree[rt<<1].maxs+=tree[rt].Lazy;
            tree[rt<<1|1].maxs+=tree[rt].Lazy;
            tree[rt<<1].sum+=(tree[rt<<1].r-tree[rt<<1].l+1)*tree[rt].Lazy;
            tree[rt<<1|1].sum+=(tree[rt<<1|1].r-tree[rt<<1|1].l+1)*tree[rt].Lazy;
            tree[rt].Lazy=0;
        }
    }
    void build(int rt,int l,int r)
    {
        tree[rt].l=l;
        tree[rt].r=r;
        tree[rt].sum=0;
        tree[rt].Lazy=0;
        if(l==r)
        {
            tree[rt].sum=tree[rt].maxs=num[l];
            return ;
        }
        int mid=(l+r)>>1;
        build(rt<<1,l,mid);
        build(rt<<1|1,mid+1,r);
        push_up(rt);
    }
    void update(int rt,int l,int r,ll val)
    {
        if(l<=tree[rt].l&&tree[rt].r<=r)
        {
            tree[rt].sum+=(tree[rt].r-tree[rt].l+1)*val;
            tree[rt].Lazy+=val;
            tree[rt].maxs=val;
            return ;
        }
        push_down(rt);
        int mid=(tree[rt].l+tree[rt].r)>>1;
        if(r<=mid)
        {
            update(rt<<1,l,r,val);
        }
        else if(l>mid)
        {
            update(rt<<1|1,l,r,val);
        }
        else
        {
            update(rt<<1,l,mid,val);
            update(rt<<1|1,mid+1,r,val);
        }
        push_up(rt);
        tree[rt].sum=max(tree[rt<<1].sum,tree[rt<<1|1].sum);
    }
    ll querysum(int rt,int l,int r)
    {
        if(l<=tree[rt].l&&tree[rt].r<=r)
        {
            return tree[rt].sum;
        }
        push_down(rt);
        int mid=(tree[rt].l+tree[rt].r)>>1;
        if(r<=mid)
        {
            return querysum(rt<<1,l,r);
        }
        else if(l>mid)
        {
            return querysum(rt<<1|1,l,r);

        }
        else
        {
            return querysum(rt<<1,l,mid)+querysum(rt<<1|1,mid+1,r);
        }
    }
    ll querymaxs(int rt,int l,int r)
    {
        if(l<=tree[rt].l&&tree[rt].r<=r)
        {
            return tree[rt].maxs;
        }
        push_down(rt);
        int mid=(tree[rt].l+tree[rt].r)>>1;
        if(r<=mid)
        {
            return querymaxs(rt<<1,l,r);
        }
        else if(l>mid)
        {
            return querymaxs(rt<<1|1,l,r);

        }
        else
        {
            return max(querymaxs(rt<<1,l,r),querymaxs(rt<<1|1,l,r));
        }
    }
}seg;
int n,m;
int main()
{
    char opt[5];
    int u,v,w;
    while(~scanf("%d%d",&n,&m))
    {
        for(int i=1;i<=n;i++)
        {
            scanf("%d",&seg.num[i]);
        }
        seg.build(1,1,n);
        for(int i=0;i<m;i++)
        {
        cin>>opt>>u>>v;
        if(opt[0]=='Q')
            printf("%I64d\n",seg.querymaxs(1,u,v));
        else
            seg.update(1,u,u,v);
        }
    }
    return 0;
}
