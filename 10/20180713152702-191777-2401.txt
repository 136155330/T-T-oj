#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAXN = 10005;
typedef struct WORK
{
    int times;
    int cost;
}work;
bool cmp(const work &a,const work &b)
{
    return a.times<b.times;
}
work data[MAXN];
int sum[MAXN];
///sum代表从第i分钟到结束可以休息的时间
///sum[n]=1;
///if(sum[n-1]不存在事件的话)
///sum[n-1]=sum[n]+1
///if n==times[j]  sum[n]=max(sum[time[j]+cost[j]],sum[n])
///不断去更新原来的值，可以得到最优解
///即一直不是起点的话，他就可以休息，如果是起点的话，就由
///后方的时间转移过来，一个点进行多次的比较就可以完成
///状态转移方程为sum[n]=max(sum[time[j]+cost[j]-1],sum[n]) (n==time[j])
int main()
{
    int n,k;
    scanf("%d%d",&n,&k);
    memset(data,0,sizeof(data));
    memset(sum,0,sizeof(sum));
    for(int i=0; i<k; i++)
    {
        scanf("%d%d",&data[i].times,&data[i].cost);
    }
    sort(data,data+k,cmp);
//    for(int i=0;i<k;i++)
//    {
//        printf("%d %d\n",data[i].times,data[i].cost);
//    }
    int j=k-1;
    for(int i=n; i!=-1; i--)
    {
        if(i!=data[j].times)
        {
            sum[i]=sum[i+1]+1;
        }
        else
        {
            while(i==data[j].times)
            {
                sum[i]=max(sum[i],sum[data[j].times+data[j].cost]);
                j--;
            }
        }
    }
    printf("%d\n",sum[1]);
    return 0;
}
