#include<stdio.h>
#include<string.h>
#define MAXN 1000005
char word1[MAXN];
char word2[MAXN];
int next[MAXN];
void KMPGETS(char word[])
/**
构造next数组
一开始next为-1
如果匹配的话，则next[j+1]=k+1;
如果不匹配的话，只能往前面的k个字符串进行匹配
k=next[k]
因为前面的每一个next[k]都是求解出跟前面next[k-1]匹配的位置
往前走的话，如果p[k]!=p[j]
如果在长度为k的字串中，没有找到的话，
那么有可能在前面的k-1的字符中查询到。
k=next[k]
如果匹配的话next[j+1]=k+1
**/
{
    int len=strlen(word);
    int j=0;
    int k=-1;
    next[0]=-1;
    while(j!=len-1)
    {
        if(k==-1||word[j]==word[k])
        {
            k++;
            j++;
            next[j]=k;
        }
        else
        {
            k=next[k];
        }

    }
}
int KMP(char p[],char q[])
{
    int plen=strlen(p);
    int qlen=strlen(q);
    int i=0;
    int j=0;
    while(i<plen&&j<qlen)
    {
        if(j==-1||p[i]==q[j])
        {
            i++;
            j++;
        }
        else
        {
            j=next[j];
        }
    }
    if(j==qlen)
    {
        return i-j;
    }
    else
        return -1;
}
int main()
{
while(~scanf("%s %s",word1,word2))
{
    memset(next,0,sizeof(next));
    KMPGETS(word2);
    int ans=KMP(word1,word2);
    printf("%d\n",ans);
}
return 0;
}
