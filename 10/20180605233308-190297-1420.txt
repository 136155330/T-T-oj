#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;
const int MAXN = 20;
const int inf = 0x7fffffff;
typedef struct EDGE
{
    int to, w, next;
} edge;
edge maps[MAXN * 1000];
int head[MAXN];
int dis[MAXN]; ///深度表
int cnt;
queue<int> que;
void creat()
{
    for (int i = 0; i < MAXN; i++)
        head[i] = -1;
    cnt = 0;
}
void add_edge(int u, int v, int w)
{
    maps[cnt].to = v;
    maps[cnt].w = w;
    maps[cnt].next = head[u]; ///head[u]就是上一条边是啥。
    head[u] = cnt++;
}
void creats()
{
    memset(dis, -1, sizeof(dis));
    while (!que.empty())
    {
        que.pop();
    }
}
int n, m, x, y, z;
int ans, flow, s, t;
void init()
{
    creat();
    memset(maps, 0, sizeof(maps));
    creats();
    ans = 0;
}
int bfs()
{
    creats();
    dis[s] = 0;
    que.push(s);
    while (!que.empty())
    {
        int begins = que.front();
        que.pop();
        for (int i = head[begins]; i != -1; i = maps[i].next) ///遍历直接连接的点
        {
            int ends = maps[i].to;
            if (dis[ends] == -1 && maps[i].w > 0)
            {
                dis[ends] = dis[begins] + 1;
                que.push(ends);
            }
        }
    }
    return dis[t] != -1;
}
int dfs(int uu, int exp)
{ /**
在BFS之后就要从源点开始DFS找增广路， 
DFS(u,exp)表示经过u点时当前流量为exp。 
刚开始时从源点DFS时，exp=∞，表示从该点流出的流量可以为无限大。 
在DFS中遍历u所连接的点v，dis[v]必须等于dis[u]+1，否则会多走没有必要的路径。 
可以利用DFS进行多路增广来保证时间效率，即一次增广多条路。
**/
    if (uu == t)
        return exp;
    int flow = 0; ///当uu不等于t时，flow代表增广的流量
    int tmp = 0;
    for (int i = head[uu]; i != -1; i = maps[i].next)
    {
        int v = maps[i].to;
        if (dis[v] == (dis[uu] + 1) && maps[i].w > 0)
        {
            tmp = dfs(v, min(exp, maps[i].w));
            if (!tmp)
                continue;
            exp -= tmp;
            flow += tmp;
            maps[i].w -= tmp;
            maps[i ^ 1].w += tmp;
            /**
             不为0的话，当前exp就减去增广路的流量，
             代表着在u点还可以流的流量，如果exp已经等于0就代表着在该点已经没有更多流量可以流过去了
             ，必须退出增广。  
             **/
            if (!exp)
                break;
        }
    }
    /**
     同时，正向边减去流量，代表剩余流量，反向边加上流量（反向弧）

最后，该点所有的节点遍历完后，返回该点所增广的流量flow给上一层。

整个DFS结束后，最大流累加器ans加上S点的增广流量，因为停止了DFS， 
所以已经没有路可以增广，所以重新BFS给当前残余网络建层次图。 
如果BFS返回0，即S点和T点不联通时，直接退出，输出当前ans， 
也就是最大流**/
    return flow;
}
int main()
{
    int tt;
    int flag = 0;
    scanf("%d", &tt);
    while (tt--)
    {
        scanf("%d%d", &n, &m);
        init();
        s = 1;
        t = n;
        for (int i = 0; i < m; i++)
        {
            scanf("%d%d%d", &x, &y, &z);
            add_edge(x, y, z);
            add_edge(y, x, 0);
        }
        while (bfs())
        {
            ans += dfs(s, inf);
        }
        printf("Case %d: %d\n", ++flag, ans);
    }
    return 0;
}