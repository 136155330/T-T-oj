#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
typedef long long ll;
const int MAXN = 5*1e5+5;
ll gas[MAXN];
ll cost[MAXN];
int flag[MAXN];
/**
思路：
因为最后一天肯定是得卖出的，所以以最后一天为
最后一个状态，往前面推。假设最后一天的价值为
cost【n-1】，那么前一个状态对应的价值就会有两个
一个是cost【n-2】，一个是cost【n-1】-1；从两个状态
中我们当然是要选择大的那个。如果说cost【n-2】大于cost【n-1】-1；
那么我们肯定得选择在这一天卖出，不能存到cost【n-1】再卖出。
然后每次卖出就改变比较的值，往前面比较。你可能会问为什么要改变。
因为cost【n-2】的状态肯定大于cost【n-1】-1，那么再往前推一步，
cost【n-2】-1肯定大于cost【n-1】-2；所以保留cost【n-2】去与
cost【n-3】进行比较就可以了。
我们可以先标记在哪一天卖出，最后进行一次O（n）的计算就可以得出答案了。
**/
int main()
{
    int n;
    while(~scanf("%d",&n))
    {
        memset(gas,0,sizeof(gas));
        memset(cost,0,sizeof(cost));
        memset(flag,0,sizeof(flag));
        for(int i=0; i<n; i++)
            scanf("%lld",&gas[i]);
        for(int i=0; i<n; i++)
            scanf("%lld",&cost[i]);
        flag[n-1]=1;///初始标记，最后一天肯定卖出
        int ans=cost[n-1];///转移的价格
        for(int i=n-2;i!=-1;i--)
        {
            if(ans-1>cost[i])
            {
                ans--;///如果价值依旧大，那么往前接着转移
            }
            else
            {
                ans=cost[i];///如果价值小的话，进行改变转移值
                flag[i]=1;///标记卖出，再往前转移
            }
        }
        ll sum,num;
        sum=0;
        num=0;
        for(int i=0;i<n;i++)///计算答案
        {
           if(flag[i])
           {
               sum+=(num+gas[i])*cost[i];
               num=0;
           }
           else
           {
               num+=gas[i];
               sum-=num;
           }
        }
        printf("%lld\n",sum);
    }
    return 0;
}