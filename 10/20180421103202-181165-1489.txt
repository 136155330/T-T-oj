#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#define MAXN 205
#define inf 0xfffffff
/**
 先通过sort进行一次排序，然后从小到大排序
 去选择，枚举，因为他要求的是最大值-最小值
 因为排序后必定是从小到大，所以我们应该判断
 是否能走通，能走通的话就去枚举，枚举每个的
 大小，最后再保留一个最小数值。就能ac了吧
 **/
using namespace std;
typedef struct EGDE
{
    int from;
    int to;
    int cost;
}edge;
int pre[MAXN];
edge read[MAXN*MAXN];
void Init()
{
    for(int i=0;i<MAXN;i++)
        pre[i]=i;
}
int acfind(int root)
{
    int son,tmp;
    son=root;
    while(root!=pre[root])
    {
        root=pre[root];
    }
    while(root!=son)
    {tmp=pre[son];
        pre[son]=root;
        son=tmp;
    }
    return root;
}
void join(int x,int y)
{
    int a,b;
    a=acfind(x);
    b=acfind(y);
    if(a!=b)
        pre[a]=b;
}
bool same(int a,int b)
{
    if(acfind(a)!=acfind(b))
        return false;
    else
        return true;
}
bool cmp(edge a,edge b)
{
    return a.cost<b.cost;
}
int main()
{
    int n,m;
    while(~scanf("%d%d",&n,&m))
    {
        for(int i=0;i<m;i++)
        {
            scanf("%d%d%d",&read[i].from,&read[i].to,&read[i].cost);
        }
        sort(read, read+m, cmp);
        int q;
        scanf("%d",&q);
        while(q--)
        {
            int begins,ends;
            scanf("%d%d",&begins,&ends);
            int ans=inf;
            for(int i=0;i<m;i++)
            {Init();
                for(int j=i;j<m;j++)
                {
                    join(read[j].from, read[j].to);
                    if(same(begins, ends))
                    {
                        ans=min(ans, read[j].cost-read[i].cost);
                    }
                }
            }
            if(ans!=inf)
            printf("%d\n",ans);
            else
                printf("-1\n");
        }
    }
    return 0;
}
