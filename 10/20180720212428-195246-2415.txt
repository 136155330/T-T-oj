#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int MAXN = 1000005;
const int INF = 0x3f3f3f3f;
typedef int ll;
int maxss(const int &a,const int &b)
{
    if(a>b)
        return a;
    else
        return b;
}
int minss(const int &a,const int &b)
{
    if(a>b)
        return b;
    else
        return a;
}
template <class T>
inline bool scan_d(T &ret)
{
    char c;
    int sgn;
    if(c=getchar(),c==EOF) return 0; //EOF
    while(c!='-'&&(c<'0'||c>'9')) c=getchar();
    sgn=(c=='-')?-1:1;
    ret=(c=='-')?0:(c-'0');
    while(c=getchar(),c>='0'&&c<='9') ret=ret*10+(c-'0');
    ret*=sgn;
    return 1;
}
inline void out(int x)
{
    if(x>9) out(x/10);
    putchar(x%10+'0');
}

struct SegmentTREE
{
    struct Node
    {
        int l,r;
        ll sum,Lazy;
        ll maxs;
        ll mins;
    } tree[MAXN<<2];
    int num[MAXN];
    inline void push_up(int rt)
    {
        //tree[rt].sum=tree[rt<<1].sum+tree[rt<<1|1].sum;
        //tree[rt].maxs=maxss(tree[rt<<1].maxs,tree[rt<<1|1].maxs);
        tree[rt].mins=minss(tree[rt<<1].mins,tree[rt<<1|1].mins);
    }
    inline void push_down(int rt)
    {
        if(tree[rt].Lazy)
        {
            tree[rt<<1].Lazy+=tree[rt].Lazy;
            tree[rt<<1|1].Lazy+=tree[rt].Lazy;
            //tree[rt<<1].maxs+=tree[rt].Lazy;
            //tree[rt<<1|1].maxs+=tree[rt].Lazy;
            tree[rt<<1].mins+=tree[rt].Lazy;
            tree[rt<<1|1].mins+=tree[rt].Lazy;
            //tree[rt<<1].sum+=(tree[rt<<1].r-tree[rt<<1].l+1)*tree[rt].Lazy;
            //tree[rt<<1|1].sum+=(tree[rt<<1|1].r-tree[rt<<1|1].l+1)*tree[rt].Lazy;
            tree[rt].Lazy=0;
        }
    }
    void build(int rt,int l,int r)
    {
        tree[rt].l=l;
        tree[rt].r=r;
        tree[rt].sum=0;
        tree[rt].Lazy=0;
        if(l==r)
        {
            tree[rt].sum=tree[rt].mins=tree[rt].maxs=num[l];
            return ;
        }
        int mid=(l+r)>>1;
        build(rt<<1,l,mid);
        build(rt<<1|1,mid+1,r);
        push_up(rt);
    }
    void update(int rt,int l,int r,ll val)
    {
        if(l<=tree[rt].l&&tree[rt].r<=r)
        {
            //tree[rt].sum+=(tree[rt].r-tree[rt].l+1)*val;
            tree[rt].Lazy+=val;
            //tree[rt].maxs+=val;
            tree[rt].mins+=val;
            return ;
        }
        push_down(rt);
        int mid=(tree[rt].l+tree[rt].r)>>1;
        if(r<=mid)
        {
            update(rt<<1,l,r,val);
        }
        else if(l>mid)
        {
            update(rt<<1|1,l,r,val);
        }
        else
        {
            update(rt<<1,l,mid,val);
            update(rt<<1|1,mid+1,r,val);
        }
        push_up(rt);
        //tree[rt].sum=maxss(tree[rt<<1].sum,tree[rt<<1|1].sum);
    }
    ll querysum(int rt,int l,int r)
    {
        if(l<=tree[rt].l&&tree[rt].r<=r)
        {
            return tree[rt].sum;
        }
        push_down(rt);
        int mid=(tree[rt].l+tree[rt].r)>>1;
        if(r<=mid)
        {
            return querysum(rt<<1,l,r);
        }
        else if(l>mid)
        {
            return querysum(rt<<1|1,l,r);

        }
        else
        {
            return querysum(rt<<1,l,mid)+querysum(rt<<1|1,mid+1,r);
        }
    }
//    ll querymaxs(int rt,int l,int r)
//    {
//        if(l<=tree[rt].l&&tree[rt].r<=r)
//        {
//            return tree[rt].maxs;
//        }
//        push_down(rt);
//        int mid=(tree[rt].l+tree[rt].r)>>1;
//        if(r<=mid)
//        {
//            return querymaxs(rt<<1,l,r);
//        }
//        else if(l>mid)
//        {
//            return querymaxs(rt<<1|1,l,r);
//
//        }
//        else
//        {
//            return maxss(querymaxs(rt<<1,l,r),querymaxs(rt<<1|1,l,r));
//        }
//    }
    ll querymins(int rt,int l,int r)
    {
        if(l<=tree[rt].l&&tree[rt].r<=r)
        {
            return tree[rt].mins;
        }
        push_down(rt);
        int mid=(tree[rt].l+tree[rt].r)>>1;
        if(r<=mid)
        {
            return querymins(rt<<1,l,r);
        }
        else if(l>mid)
        {
            return querymins(rt<<1|1,l,r);

        }
        else
        {
            return minss(querymins(rt<<1,l,mid),querymins(rt<<1|1,mid+1,r));
        }
    }
} seg;
int n,m;
int jj=-1;
int jjj=0;
int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        int flag=0;
        int result;
        for(int i=1; i<=n; i++)
        {
            //scanf("%d",&seg.num[i]);
            scan_d(seg.num[i]);
        }
        seg.build(1,1,n);
        for(int i=1; i<=m; i++)
        {
            int d,s,t;
            //scanf("%d%d%d",&d,&s,&t);
            scan_d(d);
            scan_d(s);
            scan_d(t);
            if(flag)
                continue;
            d=-d;
            seg.update(1,s,t,d);
//            for(int i=1;i<=n;i++)
//            {
//                printf("%d ",seg.querysum(1,i,i));
//            }
//            puts("");
            // printf("%d\n",seg.querymins(1,1,n));
            if(seg.querymins(1,1,n)<0)
            {

                flag=1;
                result=i;
            }
        }
        if(flag)
        {
            //int jj=-1;
            //out(jj);
            //puts("");
            printf("-1\n");
            out(result);
            puts("");
        }
        if(flag==0)
           {
               //int jjj=0;
               //out(jjj);
               printf("0\n");
               //puts("");
           }
    }
    return 0;
}