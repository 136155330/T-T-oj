#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
vector<int>vec;
const int MAXN = 100005;
int arr[MAXN];
int root[MAXN];///该数组储存根节点的位置
typedef struct NODE
{
    int l, r, sum;
    /**
     现在的l r 已经不再是单纯的rt << 1 , rt << 1 | 1
     而是指向，指向节点
     **/
}node;
node segtree[MAXN * 20];
int gets(int x)
{
    return lower_bound(vec.begin(), vec.end(), x) - vec.begin() + 1;
}
int tot;
int build(int l, int r)///return p p的值是点的坐标
{
    int p = ++tot;
    segtree[p].sum = 0;
    if(l == r)
    {
        /**
         一层一层的返回就对了。。。。。。
         返回这个节点的坐标就对了。。。。。
         然后才能实现 l r 的指向
         **/
        return p;///返回指向
    }
    int mid = (l + r) >> 1;
    segtree[p].l = build(l, mid);
    segtree[p].r = build(mid + 1, r);
    return p;
}
int update(int now, int l, int r, int pos, int val)
/**
 now - 当前节点 pos - 指要更新的点 val - 权值
 每次更新，都会创建一条链，所以得更新tot
 **/
{
    int p = ++ tot;
    segtree[p] = segtree[now];///这样会将上一个的点
    ///的值赋值给当前的点，这样不需要修改的那棵子树的连接
    ///这样每次多生成的一颗线段树，只要多一条链，所以节省了空间
    if(l == r)
    {
        segtree[p].sum += val;///如果每次更新到底的话，那么就更新底的值
        return p;
    }
    int mid = (l + r) >> 1;
    if(pos <= mid)///如果增加的点 < mid 那么肯定可以往左子树移动
    {
        segtree[p].l = update(segtree[p].l, l, mid, pos, val);
    }
    else///否则向右子树移动
    {
        segtree[p].r = update(segtree[p].r, mid + 1, r, pos, val);
    }
    segtree[p].sum = segtree[segtree[p].l].sum + segtree[segtree[p].r].sum;
    return p;
}
int query(int p, int q, int l, int r, int k)
{
    if(l == r)
        return l;///查询到底就输出
    int mid = (l + r) >> 1;
    int cnt = segtree[segtree[p].l].sum - segtree[segtree[q].l].sum;
    ///将两棵树相减，可得要的状态
    if(k <= cnt)///k 即为第k大，那么就是查询第k大，判断个数再进行移动
    {
        return query(segtree[p].l, segtree[q].l, l, mid, k);
    }
    else
    {
        return query(segtree[p].r, segtree[q].r, mid + 1, r, k - cnt);
    }
}
int main()
{
    int n,q;
    while(~scanf("%d%d",&n,&q))
    {
        memset(arr, 0, sizeof(arr));
        vec.clear();
        tot = 0;
        for (int i = 1; i <= n; i ++) {
            scanf("%d",&arr[i]);
            vec.push_back(arr[i]);
        }
        sort(vec.begin(), vec.end());
        vec.erase(unique(vec.begin(),vec.end()),vec.end());
        ///排序去重，离散处理
        root[0] = build(1, n);
        ///printf("tot = %d\n",tot);
        ///先建树
        for (int i = 1; i <= n; i ++) {
            root[i] = update(root[i - 1], 1, n, gets(arr[i]), 1);
        }
        int a, b, c;
        for (int i = 0; i < q; i ++) {
            scanf("%d%d%d",&a,&b,&c);
            int re = query(root[b], root[a - 1], 1, n, c);
            //printf("re = %d\n",re);
            printf("%d\n",vec[re - 1]);
        }
    }
    return 0;
}
