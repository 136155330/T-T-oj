#include <bits/stdc++.h>
#pragma GCC optimize(2)
using namespace std;
inline void Read(int &x)
{
    char c=getchar();
    x=0;
    while (c<'0'||c>'9')
    {
        c=getchar();
    }
    while (c>='0'&&c<='9')
    {
        x=x*10+c-'0';
        c=getchar();
    }
}
inline void Out(int a)    //输出一个整型
{
    if(a<0)
    {
        putchar('-');
        a=-a;
    }
    if(a>9)
        Out(a/10);
    putchar(a%10+'0');
}
const int MAXM = 2e6 + 5;
const int MAXN = 1005;
int arr[MAXN][MAXN];
struct node{
    int be, en;
    int value;
}brr[MAXM];
int n, m;
int pre[MAXN * MAXN + 5];
bool cmp(node a,node b){
    return a.value < b.value;
}
void Init(){
    for(int i = 0; i < MAXN * MAXN + 5; i ++){
        pre[i] = i;
    }
}
int acfinds(int x){
    return x == pre[x] ? x : pre[x] = acfinds(pre[x]);
}
int kruskal(int b, int e, int len){
    for(int i = 0; i < len; i ++){
        if(acfinds(brr[i].be) != acfinds(brr[i].en)){
            int x = acfinds(brr[i].be);
            int y = acfinds(brr[i].en);
            pre[x] = y;
        }
        if(acfinds(b) == acfinds(e)){
            return brr[i].value + 1;
        }
    }
    return 0;
}
int main(){
    Read(n);
    Read(m);
    Init();
    for(int i = 1; i <= n; i ++)
        for(int j = 1; j <= m; j ++)
            Read(arr[i][j]);
    int num = 0;
    for(int i = 1; i <= n; i ++){
        for(int j = 1; j <= m; j ++){
            int x, y;
            x = i + 1, y = j;
            int value;
            if(x > 0 && x <= n){
                value = max(arr[i][j], arr[x][y]);
                brr[num].be = m * (i - 1) + j;
                brr[num].en = m * (x - 1) + y;
                brr[num].value = value;
                num ++;
            }
            x = i, y = j + 1;
            if(y > 0 && y <= m){
                value = max(arr[i][j], arr[x][y]);
                brr[num].be = m * (i - 1) + j;
                brr[num].en = m * (x - 1) + y;
                brr[num].value = value;
                num ++;
            }
        }
    }
    sort(brr, brr + num, cmp);
    int x1, y1, x2, y2;
    Read(x1);
    Read(y1);
    Read(x2);
    Read(y2);
    int begins = (x1-1) * m + y1;
    int ends = (x2-1) * m + y2;
    if(begins==ends) {
        Out(arr[x1][y1] + 1);
        printf("\n");
    }
    else {
        int result = kruskal(begins, ends, num);
        Out(result);
        printf("\n");
    }
    return 0;
}
