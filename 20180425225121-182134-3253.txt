#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
/**
Ð´¸ö¾²Ì¬Ê÷°å×Ó
**/
const int MAXN=500005;
const int sonmax=26;
struct Node
{
    int maxs=0;
    int sizes;
    struct node
    {
        int son[sonmax];
        int cnt;
    } tire[MAXN];
    void init()
    {
        for(int i=0; i<26; i++)
            tire[0].son[i]=0;
        sizes=1;
        tire[0].cnt=0;
        maxs=0;
    }
    int getid(char s)
    {
        return s-'a';
    }
    void inserts(char str[])
    {
        int t=0;
        int begins=0;
        int len=strlen(str);
        for(int i=0; i<len; i++)
        {
            int ans=getid(str[i]);
            if(!tire[begins].son[ans])
            {
                for(int i=0; i<26; i++)
                    tire[sizes].son[i]=0;
                tire[begins].son[ans]=sizes++;
            }
            begins=tire[begins].son[ans];
            t=max(t,tire[begins].cnt);
        }
        tire[begins].cnt=t+1;
        maxs=max(tire[begins].cnt,maxs);
    }
    int finds(char strs[])
    {
        int lens=strlen(strs);
        int now=0;
        int i;
        for(i=0; i<lens; i++)
        {
            int k=getid(strs[i]);
            if(tire[now].son[k])
            {
                now=tire[now].son[k];
            }
            else
                break;
        }
        if(i==lens&&tire[now].cnt)
        {
            return 1;
        }
        else
            return 0;
    }
} tree;
int main()
{
    int n;
    char word[205];
    scanf("%d",&n);
    tree.init();
    while(n--)
    {
        scanf("%s",&word);
        tree.inserts(word);
    }
    printf("%d\n",tree.maxs);
    return 0;
}
