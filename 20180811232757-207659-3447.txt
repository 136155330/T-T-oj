#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
int maps[105][105];
int col[105];
int n,m;
bool bfs(int s)
{
    col[s] = 1;
    queue<int>que;
    while(!que.empty())
    {
        que.pop();
    }
    que.push(s);
    while(!que.empty())
    {
        int begins = que.front();
        que.pop();
        for (int i = 1; i <= n; i ++) {
            if(maps[begins][i] == 1 && col[i] == -1)
            {
                col[i] = !col[begins];
                que.push(i);
            }
            if(maps[begins][i] == 1 && col[i] == col[begins])
            {
                return false;
            }
        }
    }
    return true;
}
int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        memset(maps, 0, sizeof(maps));
        memset(col, -1, sizeof(col));
        for (int i = 0; i < m; i ++) {
            int a,b;
            scanf("%d%d",&a,&b);
            maps[a][b] = 1;
            maps[b][a] = 1;
        }
        int sum = 0;
        for(int i = 1; i <= n; i++)
        {
            if(col[i] == -1)
            {
            if(bfs(i) == false)
            {
                sum ++;
            }
            }
        }
        if(n % 2 == 0 && sum % 2 == 1)
        printf("%d\n",sum + 1);
        else if(n % 2 == 1 && sum % 2 == 1)
            printf("%d\n", sum);
        else if(n % 2 == 1 && sum % 2 == 0)
            printf("%d\n", sum + 1);
        else printf("%d\n", sum);
    }
    return 0;
}
