#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<string.h>
#include<queue>
#include<vector>
#define MAXN 100005
/**
其实拓扑没必要用优先队列，
只是题目要求，小的在前面罢了
美滋滋，
优先队列维护的是
先队列是大顶堆，队头元素最大。
存个拓扑的板子。
大概思路是：
开个数组标记头连接点
开个优先队列储存小的数值
然后用栈储存连接点，
再pop出来的时候，
进行-1操作就ojbk了

**/
using namespace std;
int degree[MAXN];
vector<int>out[MAXN];
void topusort(int n)
{
    priority_queue<int>que;
    for(int i=1;i<=n;i++)
    {
        if(degree[i]==0)
        {
            que.push(-i);///这里反向
        }
    }
    for(int i=0;i<n-1;i++)
    {
        int x=-que.top();
        printf("%d ",x);
        que.pop();
        for(int j=0;j<out[x].size();j++)
        {
            int y=out[x][j];
            degree[y]--;
            if(degree[y]==0)
            {
                que.push(-y);
            }
        }
    }
    printf("%d\n",-que.top());///这里是末尾个特殊处理
}
int main()
{
int n,m;
while(~scanf("%d%d",&n,&m))
{
    memset(degree,0,sizeof(degree));
    for(int i=0;i<=n;i++)
    {
        out[i].clear();
    }
    for(int i=0;i<m;i++)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        degree[y]++;
        out[x].push_back(y);
    }
    topusort(n);
}
return 0;
}
