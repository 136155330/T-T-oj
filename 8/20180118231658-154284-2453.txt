#include<stdio.h>
#include<string.h>
int flag;
int map[15][15];
char charmap[15][15];
int maps[15][15];
int hvids[15][15];///лл
int lvids[15][15];///┴л
int area[15][15];
int judge(int i,int j)
{
    if(1<=i&&i<=3&&j>=1&&j<=3)return 1;
    if(1<=i&&i<=3&&j>3&&j<=6)return 2;
    if(1<=i&&i<=3&&j>6&&j<=9)return 3;
    if(i>3&&i<=6&&j>=1&&j<=3)return 4;
    if(i>3&&i<=6&&j>3&&j<=6)return 5;
    if(i>3&&i<=6&&j>6&&j<=9)return 6;
    if(i>6&&i<=9&&j>=1&&j<=3)return 7;
    if(i>6&&i<=9&&j>3&&j<=6)return 8;
    if(i>6&&i<=9&&j>6&&j<=9)return 9;
}
void dfs(int i,int j)
{
    if(i == 10)
    {
        flag = 1;
        for(int i=1; i<=9; i++)
        {
            for(int j=1; j<=9; j++)
                printf("%d",map[i][j]);
            printf("\n");
        }
        return ;
    }
    if(flag) return ;
    if(map[i][j]!=0)
    {
        if(j == 9) dfs(i+1,1);
        else  dfs(i,j+1);
    }
    else
    {
        for(int num=1; num<10; num++)
        {
            if(!hvids[i][num] && !lvids[j][num] && !area[judge(i,j)][num])
            {
                map[i][j] = num;
                hvids[i][num] = 1;
                lvids[j][num] = 1;
                area[judge(i,j)][num] = 1;
                if( j == 9)  dfs(i+1,1);
                else  dfs(i,j+1);
                map[i][j] = 0;
                hvids[i][num] = 0;
                lvids[j][num] = 0;
                area[judge(i,j)][num] = 0;

            }
        }
    }
}
int main()
{
    int n;
    while(~scanf("%d",&n))
    {
        while(n--)
        {
            memset(map,0,sizeof(map));
            memset(charmap,0,sizeof(charmap));
            memset(hvids,0,sizeof(hvids));
            memset(lvids,0,sizeof(lvids));
            memset(area,0,sizeof(area));
            flag=0;
            for(int i=1; i<=9; i++)
                scanf("%s",&charmap[i]);
            for(int i=1; i<=9; i++)
            {
                for(int j=1; j<=9; j++)
                {
                    map[i][j]=charmap[i][j-1]-'0'+0;
                    if(map[i][j]!=0)
                    {
                        hvids[i][map[i][j]]=1;
                        lvids[j][map[i][j]]=1;
                        area[judge(i,j)][map[i][j]]=1;
                    }
                }
            }
            dfs(1,1);
        }
    }
    return 0;
}
