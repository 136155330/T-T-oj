#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int MAXN = 20005;
const int MAXM = 200005;
const int inf = 0xfffffff;
const int cz = 2000;
typedef struct EDGE
{
    int to,next,cap,flow,cost;
}Edge;
Edge edge[MAXM];
int head[MAXN],tol;
int pre[MAXN],dis[MAXN];
bool vis[MAXN];
int N;
void init(int n)
{
    N=n;
    tol=0;
    memset(head,-1,sizeof(head));
}
void add_edge(int u,int v,int cap,int cost)
{
    edge[tol].to=v;
    edge[tol].cap=cap;
    edge[tol].cost=cost;
    edge[tol].flow=0;
    edge[tol].next=head[u];
    head[u]=tol++;
    edge[tol].to=u;
    edge[tol].cap=0;
    edge[tol].cost=-cost;
    edge[tol].flow=0;
    edge[tol].next=head[v];
    head[v]=tol++;
}
bool spfa(int s,int t)
{
    queue<int>q;
    for(int i=0;i<=MAXN;i++)
    {
        dis[i]=inf;
        vis[i]=false;
        pre[i]=-1;
    }
    dis[s]=0;
    vis[s]=true;
    q.push(s);
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        vis[u]=false;
        for(int i=head[u];i!=-1;i=edge[i].next)
        {
            int v=edge[i].to;
            if(edge[i].cap>edge[i].flow&&dis[v]>dis[u]+edge[i].cost)
            {
                dis[v]=dis[u]+edge[i].cost;
                pre[v]=i;
                if(!vis[v])
                {
                    vis[v]=true;
                    q.push(v);
                }
            }
        }
    }
    if(pre[t]==-1)
        return false;
    else
        return true;
}
int minCostMaxflow(int s,int t,int &cost)
{
    int flow=0;
    cost=0;
    while(spfa(s,t))
    {//printf("..\n");
        int Min=inf;
        for(int i=pre[t];~i;i=pre[edge[i^1].to])
        {
            if(Min>edge[i].cap-edge[i].flow)
            {
                Min=edge[i].cap-edge[i].flow;
            }
        }
        for(int i=pre[t];~i;i=pre[edge[i^1].to])
        {
            edge[i].flow+=Min;
            edge[i^1].flow-=Min;
            cost+=edge[i].cost*Min;
        }
        flow+=Min;
    }
    return flow;
}
int main()
{
    int n,m;
    while(~scanf("%d%d",&n,&m))
    {
        init(n);
        int s=10000,t=10001;
        for(int i=1;i<n-1;i++)
        {
            add_edge(i,i+n,1,0);
        }
        int u,v,w;
        for(int i=0;i<m;i++)
        {
            scanf("%d %d %d",&u,&v,&w);
            if(u==0)
            {
                add_edge(u,v,1,w);
            }
            else if(u==n-1)
            {
                add_edge(u,v,1,w);
            }
            else if(v==0)
            {
                add_edge(u,v,1,w);
            }
            else if(v==n-1)
            {
                add_edge(u,v,1,w);
            }
            if(u!=0&&u!=n-1&&v!=0&&v!=n-1)
            {
                add_edge(u+n,v,1,w);
            }

        }
        add_edge(s,0,2,0);
        add_edge(n-1,t,2,0);
        int ans=0;
        int num=minCostMaxflow(s,t,ans);
        if(num<2)
        {
            printf("-1\n");
        }
        else
            printf("%d\n",ans);
    }
    return 0;
}
