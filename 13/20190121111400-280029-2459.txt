#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <map>
using namespace std;
const int MAXN = 100001 + 5;
/**
 [思路]：主席树？
 应该是主席树
 先开一个数组标记出现的次数，一开始全为0，
 那么每添加一个就增加一条链
 那么就是说只要更新完后
 从根跑下来就对了
 **/
int arr[MAXN];///数值数组
int root[MAXN];///每次更新所对应的链的头节点
typedef struct SEGTREE
{
    int l, r, sum, num;
}segtree;
int n, m, a, b, k;
int tot;
segtree seg[MAXN * 20];
int build(int l, int r)
{
    int p = ++ tot;
    seg[p].sum = 0;
    if(l == r)
    {
        seg[p].num = l;
        return p;
    }
    int mid = (l + r) >> 1;
    seg[p].l = build(l, mid);
    seg[p].r = build(mid + 1, r);
    return p;
}
int update(int now, int l, int r, int pos)
{
    int p = ++tot;
    seg[p] = seg[now];
    if(l == r)
    {
        seg[p].sum += 1;
        return p;
    }
    int mid = (l + r) >> 1;
    if(pos <= mid)
    {
        seg[p].l = update(seg[p].l, l, mid, pos);
    }
    else
    {
        seg[p].r = update(seg[p].r, mid + 1, r, pos);
    }
    seg[p].sum = seg[seg[p].l].sum + seg[seg[p].r].sum;
    return p;
}
int query(int p, int q, int l, int r, int k)
{
    if(l == r)
    {
        //printf("l = %d\n", l);
        return l;
    }
    int mid = (l + r) >> 1;
    int cnt = seg[seg[p].l].sum - seg[seg[q].l].sum;
    if(k <= cnt)
    {
        return query(seg[p].l, seg[q].l, l, mid, k);
    }
    else
    {
        return query(seg[p].r, seg[q].r, mid + 1, r, k - cnt);
    }
}
typedef struct MYINT
{
    int id;
    int num;
}myint;
vector<myint>vec;
bool cmp(const myint &a, const myint &b)
{
    return a.num < b.num;
}
int re[MAXN];
int main()
{
    while(~scanf("%d%d", &n, &m))
    {
     /**
      考虑排序后，如何标记出现？
      如何对应位置
      一开始数值存在num，id
      **/
        memset(re, 0, sizeof(re));
        memset(arr, 0, sizeof(arr));
        memset(root, 0, sizeof(root));
        memset(seg, 0, sizeof(seg));
        vec.clear();
        for(int i = 0; i < n; i ++)
        {
            myint temp;
            scanf("%d", &temp.num);
            temp.id = i + 1;
            vec.push_back(temp);
        }
        sort(vec.begin(), vec.end(), cmp);
        for(int i = 0; i < n; i ++)
        {
            re[vec[i].id] = i;
        }
        root[0] = build(1, n + 1);
        for(int i = 1; i <= n; i ++)
        {
            root[i] = update(root[i - 1], 1, n + 1, re[i] + 1);
        }
        int a, b, k;
        for(int i = 0; i < m; i ++)
        {
            scanf("%d%d%d", &a, &b, &k);
            int result = query(root[b], root[a - 1], 1, n + 1, k);
            printf("%d\n", vec[result - 1].num);
        }
    }
    return 0;
}
