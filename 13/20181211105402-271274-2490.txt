#include <bits/stdc++.h>
using namespace std;
/**
该天的最小波动值 = min{|该天以前某一天的营业额-该天营业额|}
可以认为是寻找比他小的一个数，或者寻找一个比他大的数
然后这样就可以得到改天的最小波动数
比较复杂度大概是一个o(2 * n)
**/
const int MAXN = 327670 + 5;
int tot, root, n, INF = 0x7fffffff;
typedef long long ll;
map<int, int>M;
typedef struct Treap
{
    typedef struct NODE
    {
    int l, r;
    int val, dat;
    int cnt, size;
    }node;
    node arr[MAXN];
    void clear()
    {
        memset(arr, 0, sizeof(arr));
    }
    int New(int val)
    {
        arr[++tot].val = val;
        arr[tot].dat = rand();
        arr[tot].cnt = arr[tot].size = 1;
        /**
         size 子数的大小 cnt 重复出现的数字的次数
         **/
        return tot;
    }
    void Update(int p)
    {
        arr[p].size = arr[arr[p].l].size + arr[arr[p].r].size + arr[p].cnt;
    }
    void Build()
    {
        New(-INF);///生成两个节点，一个-∞的节点
        New(INF);///一个∞的节点
        root = 1, arr[1].r = 2;
        Update(root);
    }
    int GetRankByval(int p, int val)///查询数值x的排名
    {
        if(p == 0)
            return 0;
        if(val == arr[p].val)
        {
            return arr[arr[p].l].size ;
        }
        if(val < arr[p].val)
        {
            return GetRankByval(arr[p].l, val);
        }
        return GetRankByval(arr[p].r, val) + arr[arr[p].l].size + arr[p].cnt;
    }
    int GetvalByRank(int p, int rank)
    {
        if(p == 0)
            return 0;
        if(arr[arr[p].l].size >= rank)
            return GetvalByRank(arr[p].l, rank);
        if(arr[arr[p].l].size + arr[p].cnt >= rank)
        {
            return arr[p].val;
        }
        return GetvalByRank(arr[p].r, rank - arr[arr[p].l].size - arr[p].cnt);
    }
    void zig(int &p)
    {
        int q = arr[p].l;
        arr[p].l = arr[q].r;
        arr[q].r = p;
        p = q;
        Update(arr[p].r);
        Update(p);
    }
    void zag(int &p)
    {
        int q = arr[p].r;
        arr[p].r = arr[q].l;
        arr[q].l = p;
        p = q;
        Update(arr[p].l);
        Update(p);
    }
    void Insert(int &p, int val)
    {
     if(p == 0)
     {
         p = New(val);
         return ;
     }
     if(val == arr[p].val)
     {
         arr[p].cnt ++;
         Update(p);
         return ;
     }
     if(val < arr[p].val)
     {
         Insert(arr[p].l, val);
         if(arr[p].dat < arr[arr[p].l].dat)
             zig(p);
     }
     else
     {
         Insert(arr[p].r, val);
         if(arr[p].dat < arr[arr[p].r].dat)
             zag(p);
     }
        Update(p);
    }
    int Getpre(int val)///寻找前驱
    {
        int ans = 1;///-inf
        int p = root;
        while(p)
        {
            if(val == arr[p].val)
            {
                if(arr[p].l > 0)///寻找的是前面那个
                {
                    p = arr[p].l;
                    /**
                     所以往左子树的最右节点就是符合条件的那个
                     **/
                    while(arr[p].r > 0)
                    {
                        p = arr[p].r;
                    }
                    ans = p;
                }
                break;
            }
            /**
             因为ans = 1，即ans = -inf
             那么我们每次都会更新ans的值。
             如果arr[p].val < val 并且 arr[p].val > arr[ans].val
             并且这个点没有右子树，那么这个点肯定是在找不到val的情况下的
             最大值,所以我们这个时候p的值就等于0，那么这个循环就结束了
             **/
            if(arr[p].val < val && arr[p].val > arr[ans].val)
                ans = p;
            p = val < arr[p].val ? arr[p].l : arr[p].r;
        }
        return arr[ans].val;
    }
    int GetNext(int val)///寻找后继
    {
        int ans = 2;///inf
        int p = root;
        while(p)
        {
            if(val == arr[p].val)
            {
                if(arr[p].r > 0)
                {
                    p = arr[p].r;
                    while(arr[p].l > 0)
                        p = arr[p].l;
                    ans = p;
                }
                break;
            }
            if(arr[p].val > val && arr[p].val < arr[ans].val)
                ans = p;
            p = val < arr[p].val ? arr[p].l : arr[p].r;
        }
        return arr[ans].val;
    }
    void Remove(int &p, int val)
    {
        if(p == 0)
            return ;
        if(val == arr[p].val)
        {
            if(arr[p].cnt > 1)
            {
                arr[p].cnt --;
                Update(p);
                return ;
            }
            if(arr[p].l || arr[p].r)
            {
                if(arr[p].r == 0 || arr[arr[p].l].dat > arr[arr[p].r].dat)
                {
                    zig(p);
                    Remove(arr[p].r, val);
                }
                else
                {
                    zag(p);
                    Remove(arr[p].l, val);
                }
                Update(p);
            }
            else
                p = 0;
            return ;
        }
        val < arr[p].val ? Remove(arr[p].l, val): Remove(arr[p].r, val);
        Update(p);
    }
}treap;
treap tree;
int main()
{
    int n;
    ll sum;
    while(~scanf("%d", &n))
    {
        sum = 0;
        tree.clear();
        srand(time(0));
        tree.Build();
        M.clear();
        for(int i = 0; i < n; i ++)
        {
            int num;
            scanf("%d", &num);
            tree.Insert(root, num);
            M[num] ++;
            if(M[num] >= 2)
            {
            continue;
            }
            int maxs = tree.GetNext(num);
            int mins = tree.Getpre(num);
            //printf("mins = %d maxs = %d\n", mins, maxs);
            if(maxs == 0x7fffffff && mins == -0x7fffffff)
            {
                sum += num;
            }
            else if(maxs == 0x7fffffff && mins != -0x7fffffff)
            {
                sum += (num - mins);
            }
            else if(maxs != 0x7fffffff && mins == -0x7fffffff)
            {
                sum += (maxs - num);
            }
            else
            {
                sum += min(maxs - num, num - mins);
            }
            //printf("sum = %d\n", sum);
        }
        printf("%d\n", sum);
    }
    return 0;

}
