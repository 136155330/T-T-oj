#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
/**
 每行按顺序排列三个整数A、B和c，意思是A相信B永远不会比他更吃掉c糖果。
 B - A <= C
 
 2 2
 1 2 5
 2 1 4
 
 B比A多出来的糖果不超过C个糖果
 1 认为 2 比他最多多5个糖果
 2 认为 1 最多比2多4个糖果
 听说是建完图
 直接莽dij
 我试试
 **/
const int inf = 0x7fffffff;
const int MAXN = 150000 + 5;
int head[MAXN], dist[MAXN], vids[MAXN];
int tot;
typedef struct NODE
{
    int to;
    int cost;
    friend bool operator < (const NODE &a, const NODE &b) {
        return a.cost > b.cost;
    }
}node;
typedef struct EDGE
{
    int from, to, w;
}edge;
edge maps[MAXN * 2];
void Init()
{
    for(int i = 0; i < MAXN; i ++)
    {
        head[i] = -1;
        dist[i] = inf;
    }
    memset(maps, 0, sizeof(maps));
}
void add(int u, int v, int w)
{
    maps[tot].from = head[u];
    maps[tot].to = v;
    maps[tot].w = w;
    head[u] = tot ++;
}
void dijkstra(int u, int v)///单源最短路
{
    priority_queue<node>que;
    while(!que.empty())
        que.pop();
    node begins;
    begins.to = u;
    begins.cost = 0;
    que.push(begins);
    while(!que.empty())
    {
        node ends;
        ends = que.top();
        que.pop();
        if(!vids[ends.to])
        {
            vids[ends.to] = 1;
        dist[ends.to] = min(dist[ends.to], ends.cost);
        for(int i = head[ends.to]; ~i; i = maps[i].from)
        {
            int to = maps[i].to;
            int w = maps[i].w;
            if(!vids[to])
            {
                node ans;
                ans.cost = ends.cost + w;
                ans.to = to;
                que.push(ans);
            }
        }
        }
    }
}
int n, m;
int main()
{
    while(~scanf("%d%d", &n, &m))
    {
        Init();
        for(int i = 0; i < m; i ++)
        {
            int u, v, w;
            scanf("%d%d%d", &u, &v, &w);
            add(u, v, w);
        }
        dijkstra(1, n);
        printf("%d\n", dist[n] - dist[1]);
    }
    
    return 0;
}
