#include<bits/stdc++.h>
using namespace std;
#define ll long long
const int maxn = 2010;
const int maxm=1100000;
const ll inf = 0x7fffffff;
int first[maxn], sign, t, n,m,k,a[maxn];
ll ans;
struct Edge
{
    int to, next,w;
} edge[maxm];
struct node1
{
    int u,v,w;
} e[maxm];
ll dist[maxn];
struct Node
{
    int to;
    int cost;
    Node() {}
    Node(int tt, int cc): to(tt), cost(cc) {}
    friend bool operator < (const Node &a, const Node &b)
    {
        return a.cost > b.cost;
    }
};

void add_edge(int u, int v, int w)
{
    edge[sign].to = v;
    edge[sign].w = w;
    edge[sign].next = first[u];
    first[u] = sign++;
}
void init()
{
    memset(first,-1,sizeof(first));
    sign = 0;
    for(int i = 0; i < m; i ++)
    {
        add_edge(e[i].u,e[i].v,e[i].w);
    }

}
ll dijkstra(int s,int t)
{
    int to,i,w;
    for(int i=0; i<=n+1; i++)
        dist[i]=inf;
    dist[s]=0;
    priority_queue <Node> que;
    que.push(Node(s, 0));
    while(!que.empty())
    {
        Node now = que.top();
        que.pop();
        for(i = first[now.to]; i != -1; i = edge[i].next)
        {
            to = edge[i].to;
            w = edge[i].w;
            if(dist[now.to]+w<dist[to])
            {
                dist[to]=now.cost+w;
                que.push(Node(to, dist[to]));
            }
        }

    }
    return dist[t];
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int u,v,w;
        scanf("%d %d", &n, &m);
        for(int i = 0; i < m; i++)
        {
            scanf("%d %d %d", &e[i].u, &e[i].v, &e[i].w);
        }
        scanf("%d",&k);
        for(int i=1; i<=k; i++)
        {
            scanf("%d",&a[i]);
        }
     ans=inf;
        for(int i=0; i<=10; i++)
            for(int f=0; f<=1; f++)
            {
                init();
                for(int j=1; j<=k; j++)
                {
                    bool flag=((a[j]>>i)&1)^f;
                    if(flag)
                        add_edge(0,a[j],0);
                    else
                        add_edge(a[j],n+1,0);
                }
                ans=min(ans,dijkstra(0,n+1));
            }
        printf("%lld\n",ans);
    }
    return 0;
}