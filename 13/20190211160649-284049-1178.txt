#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
typedef long long ll;
const int MAXN = 100000 + 5;
ll sum = 0;
typedef struct MYINT
{
    int num, cost;
}myint;
vector<myint>vec[MAXN];
void Init()
{
    for(int i = 0; i < MAXN; i ++)
        vec[i].clear();
    sum = 0;
}
ll bfs()
{
    ll maxs = -0x7fffffff;
    queue<myint>que;
    myint begins;
    begins.num = 1;
    begins.cost = 0;
    while(!que.empty())
        que.pop();
    que.push(begins);
    while(!que.empty())
    {
        myint front = que.front();
        que.pop();
        if(maxs < front.cost)
            maxs = front.cost;
        for(int i = 0; i < vec[front.num].size(); i ++)
        {
            myint ends;
            ends.num = vec[front.num][i].num;
            ends.cost = front.cost + vec[front.num][i].cost;
            que.push(ends);
        }
    }
    return maxs;
}
int n;
int main()
{
    while(~scanf("%d", &n))
    {
        Init();
        for(int i = 0; i < n - 1; i ++)
        {
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            sum += c;
            myint temp;
            temp.num = b;
            temp.cost = c;
            vec[a].push_back(temp);
        }
        //printf("%lld %lld\n", sum, bfs());
        ll result = bfs();
        printf("%lld\n", sum - result);
    }
    return 0;
}
