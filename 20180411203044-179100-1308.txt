#include<iostream>
#include<vector>
#include<cstdio>
#include<cstring>
#include<queue>
#include<stack>
#define MAXN 1005
using namespace std;
int read[MAXN];
typedef struct MYINT
{
    int x;
    int step;
} myint;
vector<myint>maps[MAXN];
int vids[MAXN];
int n,k;
myint bfs(myint math)
{
    queue<myint>q;
    q.push(math);
    while(!q.empty())
    {
        myint ans;
        ans=q.front();
        if(ans.x==k)
        {
            return ans;
        }
        vids[ans.x]=1;
        q.pop();
        myint ends;
        for(int i=0; i<maps[ans.x].size(); i++)
        {
            ends.x=maps[ans.x][i].x;
            ends.step=ans.step+1;
            //printf("%d %d\n",ends.x,ends.step);
            if(vids[ends.x]==0)
            {
                read[ends.x]=ans.x;
                q.push(ends);
                vids[ends.x]=1;
            }
        }
    }
    myint red;
    red.step=-1;
    red.x=0;
    return red;
}
int main()
{

    while(~scanf("%d%d",&n,&k))
    {
        memset(vids,0,sizeof(vids));
        memset(read,0,sizeof(read));
        for(int i=0; i<1005; i++)
        {
            maps[i].clear();
        }
        int a,b;
        for(int i=0; i<n; i++)
        {
            scanf("%d%d",&a,&b);
            myint math;
            math.x=b;
            math.step=0;
            maps[a].push_back(math);
        }
        myint begins;
        begins.x=1;
        begins.step=1;
        myint steps=bfs(begins);
        if(steps.step!=-1)
        {
            printf("%d\n",steps.step);
            stack<int>stk;
            stk.push(steps.x);
            while(read[steps.x]!=0)
            {
                stk.push(read[steps.x]);
                steps.x=read[steps.x];
            }
            while(!stk.empty())
            {
                printf("%d\n",stk.top());
                stk.pop();
            }
        }
        else if(steps.step==-1)
        {
            printf("-1\n");
        }
    }
    return 0;
}
