#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
const int MAXN = 1005;
const int INF = 0x3f3f3f3f;
#define PI acos(-1)
int n,l;
typedef long long ll;
struct NODE
{
    int x,y;
} p[MAXN],s[MAXN]; ///p储存节点的位置,s是栈
inline bool cmp(const NODE &a,const NODE &b)
{
    double A=atan2((a.y-p[1].y),(a.x-p[1].x));
    double B=atan2((b.y-p[1].y),(b.x-p[1].x));
    if(A!=B)
        return A<B;
    else
        return a.x<b.x;
}
ll cross(NODE a,NODE b,NODE c)
{
    return 1LL*(b.x-a.x)*(c.y-a.y)-1LL*(b.y-a.y)*(c.x-a.x);
}
int tubao()
{
    p[0].x=INF;
    p[0].y=INF;
    int k;
    for(int i=1; i<=n; i++)
    {
        if(p[0].y>p[i].y||(p[0].y==p[i].y&&p[i].x<p[0].x))
        {
            p[0]=p[i];
            k=i;
        }
    }
    swap(p[k],p[1]);
    sort(&p[2],&p[n+1],cmp);
    s[0]=p[1];
    s[1]=p[2];
    int top=1;
    for(int i=3; i<=n;)
    {
        if(top&&cross(s[top-1],p[i],s[top])>=0)
            top--;
        else  s[++top]=p[i++];
    }
    return top;
}
double dis(NODE a,NODE b)
{
    double ds=sqrt((a.y-b.y)*(a.y-b.y)+(a.x-b.x)*(a.x-b.x));
    return ds;
}
int main()
{
    while(~scanf("%d%d",&n,&l))
    {
        for(int i=1;i<=n;i++)
            scanf("%d%d",&p[i].x,&p[i].y);
        int m=tubao();
        double result=0;
        for(int i=0;i<m;i++)
        {
        result+=dis(s[i],s[i+1]);
        }
        result+=dis(s[0],s[m]);
        result+=2*PI*l;
        printf("%d\n",int(result+0.5));
    }
    return 0;
}
