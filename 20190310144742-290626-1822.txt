#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
#define mem(a) memset(a, 0, sizeof(a))
const int MAXN = 1e4 + 5;
struct NODE
{
    int key;
    int value;
}arr[MAXN];
bool cmp(const struct NODE &a, const struct NODE &b)
{
    return a.value < b.value;
}
int flag[MAXN];
int n;
int main()
{
    scanf("%d", &n);
    mem(flag);
    mem(arr);
    int inf = 0;
    for(int i = 0; i < n; i ++)
    {
        arr[i].key = i;
        scanf("%d", &arr[i].value);
        flag[arr[i].key] ++;
        inf += arr[i].value;
    }
    if(inf % n != 0)
    {
        printf("Unrecoverable configuration.\n");
        return 0;
    }inf = inf / n;
    //printf("%d\n", inf);
    sort(arr, arr + n, cmp);
    int len = 0;
    vector<struct NODE>vec;
    vec.clear();
    for(int i = 0; i < n; i ++)
    {
        if(arr[i].value != inf)
            len ++, vec.push_back(arr[i]);
    }
    
    if(len == 0)
    {
        printf("Exemplary pages.\n");
    }
    else if(len == 2)
    {
        int sum = 0;
        for(int i = 0; i < vec.size(); i ++)
        {
            sum += vec[i].value;
        }
        int ans = sum / vec.size();
        //printf("%d\n", ans);
        for(int i = 0; i < vec.size(); i ++)
        {
            for(int j = 0; j < n; j ++)
            {
                if(arr[j].key == vec[i].key)
                    arr[j].value = ans;
            }
        }
        int lens = 0;
        for(int i = 0; i < n; i ++)
            if(arr[i].value != inf)
                lens ++;
        if(lens == 0)
        {
        int a, b, c;
        if(vec[0].value > vec[1].value)
        {
            a = vec[0].key;
            b = vec[1].key;
            c = (vec[0].value - vec[1].value) / 2;
        }
        else
        {
            a = vec[1].key;
            b = vec[0].key;
            c = (vec[1].value - vec[0].value) / 2;
            
        }
        printf("%d ml. from cup #%d to cup #%d.\n", c, b + 1, a + 1);
        }
        else
        {
            printf("Unrecoverable configuration.\n");
        }
    }
    else
    {
        printf("Unrecoverable configuration.\n");
    }
    return 0;
}
