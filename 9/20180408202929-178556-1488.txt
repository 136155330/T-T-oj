#include<bits/stdc++.h>
using namespace std;
typedef struct MYINT
{
    int x;
    int y;
} myint;
typedef struct ISLAND
{
    int begins;
    int ends;
    double dis;
} island;
bool cmp(island a,island b)
{
    return a.dis<b.dis;
}

myint math[105];
island land[120*120];
int pre[105];
void Init(int n)
{
    for(int i=0; i<n; i++)
        pre[i]=i;
}
int finds(int root)
{
    int son,tmp;
    son=root;
    while(root!=pre[root])///寻找父节点，一层一层向上
    {
        root=pre[root];
    }
    while(root!=son)///路径压缩，就是先将原上级保持在tmp内，在把pre[son]指向父节点，然后再将tmp赋值给son
    {
        tmp=pre[son];
        pre[son]=root;///这个过程会不断的去压缩路径，来优化，防止算法退化为O(N)的查找
        son=tmp;
    }
    return root;
}
void unionjoin(int x,int y)
{
    int u=finds(x);
    int v=finds(y);
    if(u==v)
        return ;
    else
        pre[u]=v;
}
bool same(int x,int y)
{
    return finds(x)==finds(y);
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        memset(math,0,sizeof(math));
        memset(land,0,sizeof(land));
        memset(pre,0,sizeof(pre));
        for(int i=0; i<n; i++)
        {
            scanf("%d %d",&math[i].x,&math[i].y);
        }
        int z=0;
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<n; j++)
            {
                double dd=sqrt((math[j].y-math[i].y)*(math[j].y-math[i].y)+(math[j].x-math[i].x)*(math[j].x-math[i].x));
                if(dd>=10.0 && dd<=1000.0)
                {
                    land[z].begins=i;
                    land[z].ends=j;
                    land[z].dis=dd;
                    z++;
                }
            }
        }
        sort(land,land+z,cmp);
        Init(n);
        double ans=0;
        for(int i=0; i<z; i++)
        {
            if(!same(land[i].begins,land[i].ends))
            {
                unionjoin(land[i].begins,land[i].ends);
                ans+=land[i].dis;
            }
            else
                continue;
        }

        for(int i=0; i<n; i++)
        {
            if(!same(i,0))
                ans=-1;
        }
        if(ans==-1)
            printf("oh!\n");
        else
            printf("%.1lf\n",ans*100);
    }
    return 0;
}
