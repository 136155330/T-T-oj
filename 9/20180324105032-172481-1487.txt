#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#define MAXN 105
using namespace std;
int n,m;
typedef struct MAP
{
    int begins;
    int next;
    long long cost;
} maps;
maps edge[MAXN*MAXN];
bool cmp(maps a,maps b)
{
    return a.cost<b.cost;
}
int pre[MAXN];
void Init()
{
    for(int i=1; i<=m; i++)
        pre[i]=i;
}
int unionfind(int x)
{
    if(x==pre[x])
        return x;
    return pre[x]=unionfind(pre[x]);
}
void unionjoin(int x,int y)
{
    int u=unionfind(x);
    int v=unionfind(y);
    if(u==v)
        return ;
    else
        pre[u]=v;
}
bool same(int x,int y)
{
    return unionfind(x)==unionfind(y);
}
long long kruskal()
{
    long long ans=0;
    sort(edge+1,edge+1+n,cmp);
    for(int i=1; i<=n; i++)
    {
        if(same(edge[i].begins,edge[i].next))
        {
            continue;
        }
        else
        {
            unionjoin(edge[i].begins,edge[i].next);
            ans+=edge[i].cost;
        }
    }
    return ans;
}
int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        if(n==0)break;
        for(int i=1; i<=n; i++)
            scanf("%d%d%lld",&edge[i].begins,&edge[i].next,&edge[i].cost);
        Init();
        long long ans=kruskal();
        for(int i=1; i<=m; i++)
        {
            if(!same(i,1))
            {
                ans=-1;
            }
        }
        if(ans==-1)
            printf("?\n");
        else
            printf("%lld\n",ans);
    }
    return 0;
}
