#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#define inf 0x6ffffff
using namespace std;
typedef struct NODE
{
    int x;
    int y;
    int step;
}node;
char maps[205][205];
int vids[205][205];
int sum1[205][205];
int sum2[205][205];
int n,m;
int moves[5][5]={{0,-1},{0,1},{-1,0},{1,0}};///上下左右
int judge(node a)///y-行数 x-列数 i-n j-m y-n x-m
{
     if(a.x<0 || a.y<0 || a.y>=n || a.x>=m || maps[a.y][a.x]=='#' || vids[a.y][a.x])
        return 0;
     return 1;
}
void bfs(node a,int sum[][205])
{
    node start,endz;
    start.x=a.x;
    start.y=a.y;
    start.step=0;
    queue<node>q;
    q.push(start);
    while(!q.empty())
    {start=q.front();
    q.pop();
     for(int i=0;i<4;i++)
     {
         endz.x=start.x+moves[i][0];
         endz.y=start.y+moves[i][1];
         endz.step=start.step+1;
         if(judge(endz))
         {
            q.push(endz);
            vids[endz.y][endz.x]=1;
            if(maps[endz.y][endz.x]=='@')
                sum[endz.y][endz.x]=endz.step;
            q.push(endz);
         }
         else
            continue;
     }
    }
}
int main()
{
    while(~scanf("%d%d",&n,&m))
    {node a,b;
        memset(vids,0,sizeof(vids));
        memset(sum1,0,sizeof(sum1));
        memset(sum2,0,sizeof(sum2));
        for(int i=0; i<n; i++)///i-y j-x
            scanf("%s",&maps[i]);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(maps[i][j]=='Y')
                {
                    vids[i][j]=1;
                    a.x=j;
                    a.y=i;
                }
                if(maps[i][j]=='M')
                {
                    vids[i][j]=1;
                    b.x=j;
                    b.y=i;
                }
            }
        }
        bfs(a,sum1);
        memset(vids,0,sizeof(vids));
        vids[a.y][a.x]=1;
        vids[b.y][b.x]=1;
        bfs(b,sum2);
        int mins=inf;
        for(int i=0;i<n;i++)
        {for(int j=0;j<m;j++)
            {
               if(sum1[i][j]+sum2[i][j]<mins&&sum1[i][j]!=0&&sum2[i][j]!=0)
                mins=sum1[i][j]+sum2[i][j];
            }
    }
    printf("%d\n",mins*11);
    }
    return 0;
}
