#include <bits/stdc++.h>
int flag;
typedef struct Tire
{
    int num;
    struct Tire *next[15];
} tire;
tire *creattire()
{
    tire *p;
    p=(tire *)malloc(sizeof(tire));
    p->num=0;
    for(int i=0; i<10; i++)
        p->next[i]=NULL;
    return p;
}
void addtire(char word[],tire *root)
{
    int ans;
    int len=strlen(word);
    for(int i=0; i<len; i++)
    {
        ans=word[i]-'0';
        if(root->next[ans]==NULL)
        {
            tire *q;
            q=creattire();
            root->next[ans]=q;
            root=root->next[ans];
        }
        else
        {
            root=root->next[ans];
        }
        if(i==len-1)
        {
            root->num=1;
        }
    }
}
void deletetire(tire *root)
{
    if(root==NULL)
        return ;
    for(int i=0; i<10; i++)
    {
        if(root->next[i]!=NULL)
        {
            deletetire(root->next[i]);
        }
    }
    free(root);
}
void dfs(tire *root)
{
    if(root->num==1)
    {
        int flags=0;
        for(int i=0; i<10; i++)
        {
            if(root->next[i]!=NULL)
            {
                flags=1;
                break;
            }
        }
        if(flags==1)
        {
            flag++;
            return ;
        }
    }
    for(int i=0; i<10; i++)
    {
        if(root->next[i]!=NULL)
        {
            dfs(root->next[i]);
        }
    }
}
int main()
{
    int t;
    tire *root;
    char word[15];
    while(~scanf("%d",&t))
    {
        while(t--)
        {
            int n;
            flag=0;
            root=creattire();
            scanf("%d",&n);
            flag=0;
            memset(word,0,sizeof(word));
            for(int i=0; i<n; i++)
            {
                scanf("%s",&word);
                addtire(word,root);
            }
            dfs(root);
            if(flag!=0)
                printf("NO\n");
            else
                printf("YES\n");
            deletetire(root);
        }
    }
    return 0;
}
