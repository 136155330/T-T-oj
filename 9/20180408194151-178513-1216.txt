#include<stdio.h>
#include<string.h>
#include<iostream>
using namespace std;
#define MAXN 1000005
int pre[MAXN];
int presum[MAXN];///这个城市有多少球
int unionsearch(int root)
{
    int son,tmp;
    son=root;
    while(root!=pre[root])///寻找父节点，一层一层向上
    {
     root=pre[root];
    }
    /**while(root!=son)///路径压缩，就是先将原上级保持在tmp内，在把pre[son]指向父节点，然后再将tmp赋值给son
    {tmp=pre[son];
    pre[son]=root;///这个过程会不断的去压缩路径，来优化，防止算法退化为O(N)的查找
    son=tmp;
    }///其实可以以递归写
    /**
    来至CWL学长的代码：
    int acfind(int x)
    {
    return pre[x]==x?x:pre[x]=acfind(pre[x]);
    }
    **/
    return root;
}
int unionfinds(int root)
{
    int son,tmp;
    int step=0;
    son=root;
    while(root!=pre[root])///寻找父节点，一层一层向上
    {
     root=pre[root];
     step++;
    }
    return step;
}
void unionjoin(int x,int y)///把x城市的球运到y城市
{
    int a,b;
    a=unionsearch(x);
    b=unionsearch(y);
    if(a!=b)
    {
        pre[a]=b;
        presum[b]+=presum[a];
        presum[a]=0;
    }
}
int main()
{
   int t,n,q;
   char a;
   int b,c;
   while(~scanf("%d",&t))
   {
       for(int i=0;i<t;i++)
       {
           scanf("%d%d",&n,&q);
           for(int j=1;j<=n;j++)///实现n个城市有1个球
            presum[j]=1;
           for(int j=1;j<=n;j++)///实现单个城市为单个集合
           {
               pre[j]=j;
           }
           printf("Case %d:\n",i+1);
           for(int j=0;j<q;j++)
           {getchar();
               scanf("%c",&a);
               if(a=='T')
                {scanf("%d%d",&b,&c);
                unionjoin(b,c);
                }
               if(a=='Q')
                {scanf("%d",&b);
                int d=unionsearch(b);
                printf("%d %d %d\n",d,presum[d],unionfinds(b));
                }
           }
       }
   }
}