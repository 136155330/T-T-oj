#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#define maxn 105
using namespace std;
int n,m;///n 条路，m个村庄

typedef struct EDGE
{
    int from,to;
    long long cost;
} edge;
bool cmp(edge a,edge b)
{
    return a.cost<b.cost;
}
edge e[maxn*maxn];
int pre[maxn];
void Init()
{
    for(int i=1; i<=m; i++)
        pre[i]=i;
}
int finds(int x)
{
    if(pre[x]==x)
        return x;
    else
        return pre[x]=finds(pre[x]);
}
void unionjoin(int x,int y)
{
    int u=finds(x);
    int v=finds(y);
    if(u==v)
        return ;
    else
        pre[u]=v;
}
bool same(int x,int y)
{
    return finds(x)==finds(y);
}
long long kruskal()
{
    long long ans=0;
    sort(e+1,e+1+n,cmp);
    for(int i=1; i<=n; i++)
    {
        if(!same(e[i].from,e[i].to))
        {
            unionjoin(e[i].from,e[i].to);
            ans+=e[i].cost;
        }
        else
            continue;
    }
    return ans;
}

int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        if(n==0)break;
        for(int i=1; i<=n; i++)
        {
            scanf("%d%d%I64d",&e[i].from,&e[i].to,&e[i].cost);
        }
        Init();
        long long res;
        res=kruskal();
        for(int i=1; i<=m; i++)
        {
            if(!same(i,1))
            {
                res=-1;
            }
        }
        if(res==-1)
            printf("?\n");
        else
            printf("%d\n",res);
    }
    return 0;
}