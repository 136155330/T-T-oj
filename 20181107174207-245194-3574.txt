#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
const int MAXN = 100000 + 5;
int arr[MAXN];
int vids[MAXN];
int n, m;
typedef long long ll;
typedef struct SEGTREE
{
    int l, r, ans;
    ll sum;
}segtree;
segtree tree[MAXN << 2];
#pragma GCC optimize(2)
inline void Read(int &x)
{
    char c=getchar();
    x=0;
    while (c<'0'||c>'9')
    {
        c=getchar();
    }
    while (c>='0'&&c<='9')
    {
        x=x*10+c-'0';
        c=getchar();
    }
}
inline void Out(ll a)    //输出一个整型
{
    if(a<0)
    {
        putchar('-');
        a=-a;
    }
    if(a>9)
        Out(a/10);
    putchar(a%10+'0');
}
inline void push_up(int rt)
{
    tree[rt].sum = tree[rt << 1].sum + tree[rt << 1 | 1].sum;
    tree[rt].ans = tree[rt << 1].ans + tree[rt << 1 | 1].ans;
}
void build(int rt, int l, int r)
{
    tree[rt].l = l;
    tree[rt].r = r;
    tree[rt].sum = 0;
    tree[rt].ans = 0;
    if(l == r)
    {
        tree[rt].l = tree[rt].r = l;
        tree[rt].ans = vids[l];
        tree[rt].sum = vids[l] * l;
        return ;
    }
    int mid = (l + r) >> 1;
    build(rt << 1, l, mid);
    build(rt << 1 | 1, mid + 1, r);
    push_up(rt);
}
void update(int rt, int l, int r, int value)
{
    if(tree[rt].l == tree[rt].r)
    {
        tree[rt].ans += value;
        tree[rt].sum += (value * l);
        return ;
    }
    int mid = (tree[rt].l + tree[rt].r) >> 1;
    if(mid >= r)
    {
        update(rt << 1, l, r, value);
    }
    else if(l > mid)
    {
        update(rt << 1 | 1, l, r, value);
    }
    else
    {
        update(rt << 1, l, mid, value);
        update(rt << 1 | 1, mid + 1, r, value);
    }
    push_up(rt);
}
ll query_nth_sum(int rt, int l, int r, int k)
{
    if(l == r)
    {
        if(k == tree[rt].ans)
        return tree[rt].sum;
        else if(k < tree[rt].ans)
        {
            return tree[rt].sum - (tree[rt].l * (tree[rt].ans - k));
        }
    }
    int mid = (tree[rt].l + tree[rt].r) >> 1;
    int cnt = tree[rt << 1].ans;
    if(k <= cnt)
    {
        return query_nth_sum(rt << 1, l, mid, k);
    }
    else
    {
        return tree[rt << 1].sum + query_nth_sum(rt << 1 | 1, mid + 1, r, k - cnt);
    }
}
int main()
{
    while(~scanf("%d%d", &n, &m))
    {
        //memset(arr, 0, sizeof(arr));
        //memset(vids, 0, sizeof(vids));
        //memset(tree, 0, sizeof(tree));
        for(int i = 1; i <= n; i ++)
        {
            Read(arr[i]);
            vids[arr[i]] ++;
        }
        build(1, 1, n);
        int x, y, k;
        for(int i = 0; i < m; i ++)
        {
            Read(x);
            Read(y);
            Read(k);
            update(1, arr[x], arr[x], -1);
            update(1, y, y, 1);
            arr[x] = y;
            ll re = query_nth_sum(1, 1, n, k);
            Out(re);
            printf("\n");
        }
    }
    return 0;
}
