#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAXN = 30005;
const int inf = 1e9+7;
int dp[MAXN];///该状态代表，长度为i的最后一个尾是多少.
///这种转移方式相对于一开始的第i个数的上升子序列是多少，是倒过来的
///而且因为尾肯定是单调的，所以可以通过二分进行一次优化
///复杂度O(N*LOG2(N))
int math[MAXN];
int finds(int s,int t,int x)
{
    int l=s-1;
    int r=t+1;
    while(l+1<r)
    {
        int mid=(l+r)/2;
        if(dp[mid]<=x)
            l=mid;
        else
            r=mid;
    }
    return l;
}
int main()
{
    int n;
    while(~scanf("%d",&n))
    {
        memset(math,0,sizeof(math));
        for(int i=1;i<=n;i++)
            scanf("%d",&math[i]);
        dp[0]=-inf;
        int top=0;
        for(int i=1;i<=n;i++)
        {
            int ans=finds(0,top,math[i]);
            if(ans==top)
            {
                dp[++top]=math[i];///如果发现前面的最后一个尾的数值都比
                ///math【i】来得下，只能往后添加。所以是++top
            }
            else
            {
                dp[ans+1]=min(dp[ans+1],math[i]);
                ///如果不到最后一个的话，那就是进行修正，因为越小对于后面的情况更好
                ///所以就是dp【ans+1】，math【i】中的最小值
            }
        }
        printf("%d\n",n-top);
    }
    return 0;
}
