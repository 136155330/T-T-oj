#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100000 + 5;
typedef long long ll;
typedef struct MYINT
{
    int key, value;
    bool operator < (const MYINT &a) const {
        return value < a.value;//最大值优先
    }
}myint;
priority_queue<myint>que[MAXN];
vector<int>vec;
void Init()
{
    for(int i = 0; i < MAXN; i ++)
    {
        while(!que[i].empty())
            que[i].pop();
    }
}
void f(int num)///唯一分解
{
    vec.clear();
    if(num != 1)
    vec.push_back(num);
    for(int i = 2;i * i <= num;i ++)
    {
        while(num % i==0)
        {
            num = num / i;
            if(num != 1)
                vec.push_back(i);
            if(num == 1)
                vec.push_back(i);
        }
    }
    if(num > 2)
        vec.push_back(num);
    sort(vec.begin(),vec.end());
    vec.erase(unique(vec.begin(), vec.end()), vec.end());
}
long long gcd(long long a, long long b) {
    if(b == 0)
        return a;
    return gcd(b, a % b);
}
int n;
ll re;
int main()
{
    while(~scanf("%d", &n))
    {
        Init();
        re = 1;
        for(int ii = 0; ii < n; ii ++)
        {
            int num;
            scanf("%d", &num);
            f(num);
            myint temp;
            temp.key = 0;
            temp.value = 0;
            for(int i = 0; i < vec.size(); i ++)
            {
                if(que[vec[i]].empty())
                {
                    temp.key = num;
                    temp.value > 1 ? temp.value = temp.value : temp.value = 1;
                }
                else
                {
                    temp.key = num;
                    temp.value > que[vec[i]].top().value + 1 ? temp.value = temp.value : temp.value = que[vec[i]].top().value + 1;
                }
            }
            for(int i = 0; i < vec.size(); i ++)
            {
                que[vec[i]].push(temp);
            }
            re < temp.value ? re = temp.value : re = re;
        }
        printf("%lld\n", re);
    }
    return 0;
}
