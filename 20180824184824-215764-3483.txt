#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
#include<vector>
using namespace std;
const int MAXN = 10005;
const int MAXM = 1000050;
const int inf = 0xfffffff;
const int cz = 2000;
typedef struct EDGE
{
    int to,next,cap,flow,cost;
}Edge;
Edge edge[MAXM];
int head[MAXN],tol;
int pre[MAXN],dis[MAXN];
bool vis[MAXN];
int N;
void init(int n)
{
    N=n;
    tol=0;
    memset(head,-1,sizeof(head));
}
void addedge(int u,int v,int cap,int cost)
{
    edge[tol].to=v;
    edge[tol].cap=cap;
    edge[tol].cost=cost;
    edge[tol].flow=0;
    edge[tol].next=head[u];
    head[u]=tol++;
    edge[tol].to=u;
    edge[tol].cap=0;
    edge[tol].cost=-cost;
    edge[tol].flow=0;
    edge[tol].next=head[v];
    head[v]=tol++;
}
bool spfa(int s,int t)
{
    queue<int>q;
    for(int i=0;i<=10005;i++)
    {
        dis[i]=inf;
        vis[i]=false;
        pre[i]=-1;
    }
    dis[s]=0;
    vis[s]=true;
    q.push(s);
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        vis[u]=false;
        for(int i=head[u];i!=-1;i=edge[i].next)
        {
            int v=edge[i].to;
            if(edge[i].cap>edge[i].flow&&dis[v]>dis[u]+edge[i].cost)
            {
                //printf("%d %d\n",u,dis[u]);
                dis[v]=dis[u]+edge[i].cost;
                pre[v]=i;
                if(!vis[v])
                {//printf("v = %d\n",v);
                    vis[v]=true;
                    q.push(v);
                }
            }
        }
    }
    if(pre[t]==-1)
        return false;
    else
        return true;
}
int minCostMaxflow(int s,int t,int &cost)
{
    int flow=0;
    cost=0;
    while(spfa(s,t))
    {//printf("..\n");
        int Min=inf;
        for(int i=pre[t];~i;i=pre[edge[i^1].to])
        {
            if(Min>edge[i].cap-edge[i].flow)
            {
                Min=edge[i].cap-edge[i].flow;
            }
        }
        for(int i=pre[t];~i;i=pre[edge[i^1].to])
        {
            edge[i].flow+=Min;
            edge[i^1].flow-=Min;
            cost+=edge[i].cost*Min;
            //printf("%d %d???\n",cost,Min);
        }
        flow+=Min;
    }
    return flow;
}
int main()
{
    int n, m, k, p;
    while (~scanf("%d%d%d%d",&n,&m,&k,&p)) {
        init(n * 10);
        for (int i = 0; i < n; i ++) {
            int ans;
            scanf("%d",&ans);
            addedge(0, ans, 1, 0);
            //printf("ans = %d\n",ans);
        }
        for (int i = 0; i < k; i ++) {
            int a,b,c;
            scanf("%d%d%d",&a,&b,&c);
            addedge(a, b, inf, c);
            addedge(b, a, inf, c);
            //printf("%d %d %d\n",a,b,c);
        }
        for (int i = 0; i < p; i ++) {
            int a,b,c;
            scanf("%d%d%d",&a,&b,&c);
            addedge(b, a + 200, inf, c);
            //printf("%d %d\n",a,b);
        }
        //printf("...\n");
        for (int i = 1; i <= n; i ++) {
            addedge(i + 200, i + 200 + cz, 1, 0);
            addedge(i + 200 + cz, 8000, 1, 0);
        }
        //printf("....\n");
        int cost = 0;
        int re = minCostMaxflow(0, 8000, cost);
        //printf("%d\n",re);
        printf("%d\n",cost);
    }
    return 0;
}
