#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#pragma GCC optimize(2)
using namespace std;
const int MAXN = 1e5 + 5;
int n, m;
int arr[MAXN];
vector<double>vec;
inline void nextInt(int &x)
{
    char c;
    do c=getchar();
    while (c<'0'||c>'9');
    x=c-'0';
    while ('0'<=(c=getchar())&&c<='9') x=x*10+c-'0';
}

void Out(int a)
{
    if(a>9)
        Out(a/10);
    putchar(a%10+'0');
}

bool cmp(const int &a, const int &b)
{
    return a < b;
}
bool cmp1(const double &a, const double &b)
{
    return a < b;
}
int acfind(int ans)
{
    int l, r;
    l = -1;
    r = vec.size();
    while(l + 1 < r)
    {
        int mid = (l + r) / 2;
        if(vec[mid] >= ans)
        {
            r = mid;
        }
        else
            l = mid;
    }
    return l;
}
int main()
{
    while(~scanf("%d%d", &n, &m))
    {
        vec.clear();
        for(int i = 0; i < m; i ++)
        {
            //scanf("%d", &arr[i]);
            nextInt(arr[i]);
        }
        sort(arr, arr + m, cmp);
        vec.push_back(arr[0] - 1);
        for(int i = 0; i < m - 1; i ++)
        {
            if((arr[i + 1] - arr[i]) % 2 == 0)
            {
            vec.push_back((arr[i + 1] - arr[i]) / 2);
            vec.push_back((arr[i + 1] - arr[i]) / 2 - 0.5);
            }
            else
            {
                vec.push_back((arr[i + 1] - arr[i]) / 2);
                vec.push_back((arr[i + 1] - arr[i]) / 2);
            }
        }
        vec.push_back(n - arr[m - 1]);
        sort(vec.begin(), vec.end(), cmp1);
        int q;
        scanf("%d", &q);
        int sum = vec.size();
        for(int i = 0; i < q; i ++)
        {
            int ans;
            //scanf("%d", &ans);
            nextInt(ans);
            if(ans != 0)
            {
            int re = acfind(ans);
            int result = sum - (re + 1);
            //printf("%d\n", result);
                Out(result);
                printf("\n");
            }
            else
            {
                //printf("%d\n", m);
                Out(m);
                printf("\n");
            }
        }
    }
    return 0;
}