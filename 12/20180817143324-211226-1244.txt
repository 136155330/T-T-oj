#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
using namespace std;
typedef long long ll;
const int MAXN = 100005;
struct SEGTREE{
    struct NODE
    {
        int l, r;
        ll sum, maxs, mins, lazy;
    }tree[MAXN << 2];///线段树结构体，和，最大值，最小值，带lazy
    int num[MAXN];///存储数据
    inline void push_up(int rt)///由底向上更新
    {
        tree[rt].sum = tree[rt << 1].sum + tree[rt << 1 | 1].sum;
        tree[rt].maxs = max(tree[rt << 1].maxs, tree[rt << 1 | 1].maxs);
        tree[rt].mins = min(tree[rt << 1].mins, tree[rt << 1 | 1].mins);
    }
    inline void push_down(int rt)///由上向下更新
    {
        if(tree[rt].lazy)
        {
            tree[rt << 1].lazy += tree[rt].lazy;
            tree[rt << 1 | 1].lazy += tree[rt].lazy;
            tree[rt << 1].sum += (tree[rt << 1].r - tree[rt << 1].l + 1) * tree[rt].lazy;
            tree[rt << 1 | 1].sum += (tree[rt << 1 | 1].r - tree[rt << 1 | 1].l + 1) * tree[rt].lazy;
            tree[rt << 1].maxs = tree[rt << 1].maxs + tree[rt].lazy;
            tree[rt << 1].mins = tree[rt << 1].mins + tree[rt].lazy;
            tree[rt << 1 | 1].mins = tree[rt << 1 | 1].mins +tree[rt].lazy;
            tree[rt << 1 | 1].maxs = tree[rt << 1 | 1].maxs + tree[rt].lazy;
            tree[rt].lazy = 0;
        }
    }
    void build(int rt, int l, int r)///递归建树
    {
        tree[rt].l = l;
        tree[rt].r = r;
        tree[rt].sum = 0;
        tree[rt].lazy = 0;
        if(l == r)///如果跑到最底层，那么对底层节点进行赋值
        {
            tree[rt].sum = tree[rt].maxs = tree[rt].mins = num[l];
            return ;
        }
        int mid = (l + r) >> 1;
        build(rt << 1, l, mid);
        build(rt << 1 | 1, mid + 1, r);
        ///递归结束，开始向上更新，而添加的时候是，由上向下更新
        push_up(rt);
    }
    void update(int rt, int l, int r, ll value)
    {
        if(tree[rt].l == l && tree[rt].r == r)
        {
            tree[rt].sum += (tree[rt].r - tree[rt].l + 1) * value;
            tree[rt].maxs += value;
            tree[rt].mins += value;
            tree[rt].lazy += value;
            return ;
        }
        push_down(rt);
        int mid = (tree[rt].l + tree[rt].r) >> 1;
        if(mid >= r)
        {
            update(rt << 1, l, r, value);
        }
        else if(l > mid)
        {
            update(rt << 1 | 1, l, r, value);
        }
        else
        {
            update(rt << 1, l, mid, value);
            update(rt << 1 | 1, mid + 1, r, value);
        }
        push_up(rt);
    }
    ll query_sum(int rt, int l, int r)
    {
        if(l == tree[rt].l && r == tree[rt].r)
        {
            return tree[rt].sum;
        }
        push_down(rt);
        int mid = (tree[rt].l + tree[rt].r) >> 1;
        if(r <= mid)
        {
            return query_sum(rt << 1, l, r);
        }
        else if(l > mid)
        {
            return query_sum(rt << 1 | 1, l, r);
        }
        else
        {
            return query_sum(rt << 1, l, mid) + query_sum(rt << 1 | 1, mid + 1, r);
        }
    }
    ll query_maxs(int rt, int l, int r)
    {
        if(l == tree[rt].l && r == tree[rt].r)
        {
            return tree[rt].maxs;
        }
        push_down(rt);
        int mid = (tree[rt].l + tree[rt].r) >> 1;
        if(r <= mid)
        {
            return query_maxs(rt << 1, l, r);
        }
        else if(l > mid)
        {
            return query_maxs(rt << 1 | 1, l, r);
        }
        else
        {
            return max(query_maxs(rt << 1, l, mid), query_maxs(rt << 1 | 1, mid + 1, r));
        }
    }
    ll query_mins(int rt, int l, int r)
    {
        if(l == tree[rt].l && r == tree[rt].r)
        {
            return tree[rt].mins;
        }
        push_down(rt);
        int mid = (tree[rt].l + tree[rt].r) >> 1;
        if(r <= mid)
        {
            return query_mins(rt << 1, l, r);
        }
        else if(l > mid)
        {
            return query_mins(rt << 1 | 1, l, r);
        }
        else
        {
            return min(query_mins(rt << 1, l, mid), query_mins(rt << 1 | 1, mid + 1, r));
        }
    }
}segtree;
int main()
{
    int t;
    scanf("%d",&t);
    int cases = 0;
    while(t --)
    {
        printf("Case %d:\n",++ cases);
        int n;
        scanf("%d",&n);
        for (int i = 1; i <= n; i ++) {
            scanf("%d",&segtree.num[i]);
        }
        segtree.build(1, 1, n);
        string words;
        int a,b;
        while(cin >> words)
        {
            if(words == "Query")
            {
                cin >> a >> b;
                printf("%lld\n",segtree.query_sum(1, a, b));
            }
            else if(words == "Add")
            {
                cin >> a >> b;
                segtree.update(1, a, a, b);
            }
            else if(words == "Sub")
            {
                cin >> a >> b;
                segtree.update(1, a, a, -b);
            }
            else
            {
                break;
            }
        }
    }
    return 0;
}
