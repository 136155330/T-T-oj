#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <deque>
using namespace std;
int a, b, k;
const int MAXN = 1e6 + 2;
long long su[MAXN],cnt;
bool isprime[MAXN];
void prime()
{
    cnt = 1;
    memset(isprime,1,sizeof(isprime));
    isprime[0] = isprime[1] = 0;
    for(long long i = 2; i <= MAXN; i ++)
    {
        if(isprime[i])
            su[cnt++] = i;
        for(long long j = 1; j < cnt && su[j] * i < MAXN;j ++)
        {
            isprime[ su[j] * i] = 0;
        }
    }
}
deque<int>que;
int main()
{
    prime();
    while(~scanf("%d%d%d", &a, &b, &k))
    {
        while(!que.empty())
            que.pop_back();
        int maxs = -1;
        int sums = 0;
        for(int i = a; i <= b; i ++)
        {
            que.push_back(i);
            if(isprime[i])
                sums ++;
            if(sums == k)
            {
                //printf("%d %d\n", que[que.size() - 1], que[0]);
                maxs = max(maxs, que[que.size() - 1] - que[0] + 1);
                if(!isprime[que[0]])
                    que.pop_front();
            }
            else if(sums > k)
            {
                int ans = que[0];
                que.pop_front();
                if(isprime[ans])
                    sums --;
                maxs = max(maxs, que[que.size() - 1] - que[0] + 1);
                if(!isprime[que[0]])
                    que.pop_front();
            }
        }
        printf("%d\n", maxs);
    }
    return 0;
}
