#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;
const int MAXN = 50000 + 5;
int ver[2 * MAXN], Next[2 * MAXN], edge[2 * MAXN], head[MAXN];
/// 链式前向星
int fa[MAXN], d[MAXN], v[MAXN], lca[MAXN], ans[MAXN];
///并查集
vector<int> query[MAXN], query_id[MAXN];
///离线查询
int T, n, m, tot, t;
void add(int x, int y, int z)
{
    ver[++ tot] = y;///ver[1] = y
    edge[tot] = z;///edge[1] = z
    Next[tot] = head[x];///next[1] = head[x] = 0
    head[x] = tot;///head[x] = 1
}
void add_query(int x, int y, int id)
///记录查询
{
    query[x].push_back(y);
    query_id[x].push_back(id);
    query[y].push_back(x);///?
    query_id[y].push_back(id);
}
int acfind(int x)
{
    if(x == fa[x])
        return x;
    return fa[x] = acfind(fa[x]);
}
void tarjan(int x)
{
    v[x] = 1;///vids
    for(int i = head[x]; i; i = Next[i])
    {
        int y = ver[i];///与x相连的点
        if(v[y])
            continue;
        d[y] = d[x] + edge[i];///更新距离
        tarjan(y);
        fa[y] = x;///y 的父节点是x
    }
    for(int i = 0; i < query[x].size(); i ++)
    {
        int y = query[x][i];
        int id = query_id[x][i];
        if(v[y] == 2)///代表v[y]被搜索过了
        {
            int lca = acfind(y);
            /**
             因为前面肯定通过了一些点到达了y，也肯定能达到x，
             所以直接lca上去
             **/
            ans[id] = min(ans[id], d[x] + d[y] - 2 * d[lca]);
            /**
             因为v[y]被走过,所以acfinds(y) = 父节点
             无论怎样这颗树是同一颗，所以可得结论 d[x] + d[y] - 2 * d[lca];
             **/
        }
    }
    v[x] = 2;///搜索完所有的子树
}
void Init()
{
    tot = 0;
    for(int i = 1; i <= n; i ++)
    {
        head[i] = 0;
        fa[i] = i;
        v[i] = 0;
        query[i].clear();
        query_id[i].clear();
    }
}
int main()
{
    scanf("%d", &t);
    while(t --)
    {
        scanf("%d%d", &n, &m);
        Init();
        for(int i = 1; i < n; i ++)
        {
            int x, y, z;
            scanf("%d%d%d", &x, &y, &z);
            add(x, y, z);
            add(y, x, z);
        }
        for(int i = 1; i <= m; i ++)
        {
            int x, y;
            scanf("%d%d", &x, &y);
            if(x == y)
                ans[i] = 0;
            else
            {
                add_query(x, y, i);
                ans[i] = 1 << 30;
            }
        }
        tarjan(1);
        for(int i = 1; i <= m; i ++)
            printf("%d\n", ans[i]);
    }
    return 0;
}
