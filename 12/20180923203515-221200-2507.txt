#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAXN = 1e5 + 5;
typedef long long ll;
typedef struct SEGTREE
{
    ll l, r, ls, rs, sum, lazy;
}segtree;
segtree seg[MAXN * 20];
ll arr[MAXN];
ll root[MAXN];
ll tot = 0;
ll build(ll now, ll l, ll r)
{
    ll p = ++ tot;
    seg[p].lazy = 0;
    seg[p].sum = 0;
    seg[p].ls = l;
    seg[p].rs = r;
    if(l == r)
    {
        seg[p].sum = arr[l];
        return p;
    }
    ll mid = (l + r) >> 1;
    seg[p].l = build(seg[p].l, l, mid);
    seg[p].r = build(seg[p].r, mid + 1, r);
    seg[p].sum = seg[seg[p].l].sum + seg[seg[p].r].sum;
    return p;
}
ll update(ll l, ll r, ll now, ll val)
{
    ll p = ++ tot;
    seg[p] = seg[now];
    seg[p].sum += (r - l + 1) * val;
    ///更新包含了update范围的节点
    if(seg[p].ls == l && seg[p].rs == r)
    {
        seg[p].lazy += val;
        ///[l,r]如果是匹配的话，那么更新lazy的值
        ///不往下更新，这样的话标记永久化后，就可以节省空间
        ///不用更新一次就多出一颗线段树
        ///这样的话，在下次查询的时候，查询范围小于最后这个节点的范围
        ///只要记录lazy值然后向下查询到底，进行更新就正确了
        return p;
    }
    ll mid = (seg[p].ls + seg[p].rs) / 2;
    if(r <= mid)
    {
        seg[p].l = update(l, r, seg[p].l, val);
    }
    else if(mid < l)
    {
        seg[p].r = update(l, r, seg[p].r, val);
    }
    else
    {
        seg[p].l = update(l, mid, seg[p].l, val);
        seg[p].r = update(mid + 1, r, seg[p].r, val);
    }
    return p;
}
ll query(ll now, ll l, ll r, ll lazy)
///lazy 是记载我要查询的这个区间是如何变化的，
///因为lazy只标记在要更新的区间，lazy是不下压的
///那么我每次查询的时候只要把lazy经过的区间的lazy进行记载
///然后向下累计，直到要查询的区间，在添加上去，就完成了标记永久化
///或许你会不理解为什么是这样操作的
///因为在前面我们进行update的时候，把对应的[l,r]更新了，但是比[l,r]更小的范围是没有
///进行更新的，那么我们只要记录从父节点向下更新到我们要查询的节点，所增加的lazy的值
///就可以得到查询区间更新的值，即lazy * (r - l + 1)
///或许你会说，我们不是更新到前面操作的更新区间的[l,r]，就会改变lazy值吗？那么再加为什么不会
///发生错误，其实很简单，更新区间的[l,r]不向下更新，我们如果查询的依旧是[l,r]，那么到了l,r就结束了
///是不会再向下的，所以是没有影响的
{
    ll p = now;
    if(seg[p].ls == l && seg[p].rs == r)
    {
        return seg[p].sum + lazy * (r - l + 1);
    }
    ll mid = (seg[p].ls + seg[p].rs) / 2;
    if(r <= mid)
    {
        return query(seg[p].l, l, r, lazy + seg[p].lazy);
    }
    else if(l > mid)
    {
        return query(seg[p].r, l, r, lazy + seg[p].lazy);
    }
    else
    {
        return query(seg[p].l, l, mid, lazy + seg[p].lazy) + query(seg[p].r, mid + 1, r, lazy + seg[p].lazy);
    }
}
void change(ll ans)
///这里有个坑点，即如果ans == day，那么root[ans + 1] = 0, 0 - 1 = - 1
///那么就re了，emmmmm
///所以特判下==day就ok了
{
    tot = root[ans + 1] - 1;
}
int main()
{
    int n, m, flag;
    flag = 0;
    while(~scanf("%d",&n))
    {
        tot = 0;
        for (int i = 1; i <= n; i ++) {
            scanf("%lld",&arr[i]);
        }
        root[0] = build(tot, 1, n);
        printf("Case %d:\n",++ flag);
        ll day = 0;
        scanf("%d",&m);
        for (int i = 0; i < m; i ++) {
            char temp;
            cin >> temp;
            if(temp == 'A')
            {
                ll l, r, val;
                scanf("%lld%lld%lld", &l, &r, &val);
                root[day + 1] = update(l, r, root[day], val);
                day ++;
            }
            else if(temp == 'B')
            {
                ll l, r, t;
                scanf("%lld%lld%lld", &t, &l, &r);
                ll re = query(root[t], l, r, 0);
                printf("%lld\n",re);
            }
            else
            {
                ll ans;
                scanf("%lld",&ans);
                if(ans < day)
                change(ans);
                day = ans;
            }
        }
    }
    return 0;
}