#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAXN = 100009;
typedef struct SEGTREE
{
    int l,r;//起到的是指针的作用已经不能判断这个区间是哪到哪了。。。。
    int ll,rr;///那么我多创建两个指针来记录min，max
    int ans;
    //int num;
}segtree;
segtree seg[MAXN * 40];
int root[MAXN];
int tot = 0;
int build(int l, int r)
{
    int p = ++ tot;
    seg[p].ans = 0;
    seg[p].ll = l;
    seg[p].rr = r;
    if(l == r)
    {
        //seg[p].num = l;
        return p;
    }
    int mid = (l + r) / 2;
    seg[p].l = build(l, mid);
    seg[p].r = build(mid + 1, r);
    return p;
}
int update(int now, int l, int r, int pos, int value)
{
    int p = ++ tot;
    seg[p] = seg[now];
    if(l == r)
    {
        seg[p].ans += value;
        return p;
    }
    int mid = (l + r) / 2;
    if(pos <= mid)
    {
        seg[p].l = update(seg[p].l, l, mid, pos, value);
    }
    else
    {
        seg[p].r = update(seg[p].r, mid + 1, r, pos, value);
    }
    seg[p].ans = seg[seg[p].l].ans + seg[seg[p].r].ans;
    return p;
}
int query(int p, int q, int l, int r)///查询l r区间的数目
{
    if(seg[p].ll == l && seg[p].rr == r)
    {
        return seg[q].ans - seg[p].ans;
    }
    int mid = (seg[p].ll + seg[p].rr) / 2;
    if(r <= mid)
    {
        return query(seg[p].l, seg[q].l, l, r);
    }
    else if(l > mid)
    {
        return query(seg[p].r, seg[q].r, l, r);
    }
    else
    {
        return query(seg[p].l, seg[q].l, l, mid) + query(seg[p].r, seg[q].r, mid + 1, r);
    }
}
int main()
{
    int n, q;
    while(~scanf("%d%d",&n,&q))
    {
        tot = 0;
        memset(root, 0, sizeof(root));
        //memset(seg, 0, sizeof(seg));
        root[0] = build(1, 100005);
        for (int i = 1; i <= n; i ++) {
            int temp;
            scanf("%d",&temp);
            temp = temp + 2;
            root[i] = update(root[i - 1], 1, 100005, temp, 1);
        }
        for (int i = 1; i <= q; i ++) {
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            int res = query(root[a - 1], root[b], 1, c + 1);
            printf("%d\n",b - a + 1 - res);
        }
    }
    return 0;
}
