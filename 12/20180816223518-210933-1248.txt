#include <iostream>
#include <cstdio>
#include <cstring>
#include <stack>
using namespace std;
const int MAXN = 8005;
typedef struct SEGTREE
{
    int l,r,sum;
}segtree;
segtree seg[MAXN * 4];
int math[MAXN];
int n;
void push_up(int rt, int l, int r)
{
    seg[rt].sum = seg[rt << 1].sum + seg[rt << 1 | 1].sum;
}
void build(int rt, int l, int r)
{
    seg[rt].l = l;
    seg[rt].r = r;
    seg[rt].sum = 0;
    if(l == r)
    {
        seg[rt].sum = 1;
        return ;
    }
    int mid = (seg[rt].l + seg[rt].r) >> 1;
    build(rt << 1, l, mid);
    build(rt << 1 | 1, mid + 1, r);
    push_up(rt, l, mid);
}
int query(int rt, int sum)
{
    seg[rt].sum --;
    if(seg[rt].l == seg[rt].r)
        return seg[rt].l;
    int mid = (seg[rt].l + seg[rt].r) >> 1;
    if(sum <= seg[rt << 1].sum)
    {
        return query(rt << 1, sum);
    }
    else
    {
        return query(rt << 1 | 1, sum - seg[rt << 1].sum);
    }
}
int main()
{
    while(~scanf("%d",&n))
    {
        math[0] = 0;
        for (int i = 1; i < n; i ++) {
            scanf("%d",&math[i]);
        }
        build(1, 1, n);
        stack<int>stk;
        while (!stk.empty()) {
            stk.pop();
        }
        for (int i = n - 1; i != -1; i --) {
            int num = query(1, math[i] + 1);
            stk.push(num);
        }
        while (!stk.empty()) {
            printf("%d\n",stk.top());
            stk.pop();
        }
    }
    return 0;
}
