#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
const int MAXN = 100005;
int n, q;
typedef struct SEGTREE
{
    int ans, sum, l, r;
    ///ans - 代表个数 sum - 代表和 data - 代表数值
}segtree;
segtree seg[MAXN << 2];

long long gcd(long long a, long long b) {
    if(b == 0)
        return a;
    return gcd(b, a % b);
}

void push_up(int rt)
{
    seg[rt].sum = seg[rt << 1].sum + seg[rt << 1 | 1].sum;
    seg[rt].ans = seg[rt << 1].ans + seg[rt << 1 | 1].ans;
}
void build(int rt, int l, int r)
{
    seg[rt].l = l;
    seg[rt].r = r;
    if(l == r)
    {
        seg[rt].sum = seg[rt].ans = 0;
        return ;
    }
    int mid = (l + r) >> 1;
    build(rt << 1, l, mid);
    build(rt << 1 | 1, mid + 1, r);
    push_up(rt);
}
void update(int rt, int l, int r, int value)
{
    if(seg[rt].l == l && seg[rt].r == r)
    {
        seg[rt].ans ++;
        seg[rt].sum += value;
        //printf("%d %d\n",rt,value);
        return ;
    }
    int mid = (seg[rt].l + seg[rt].r) >> 1;
    if(mid >= r)
    {
        update(rt << 1, l, r, value);
    }
    else if(l > mid)
    {
        update(rt << 1 | 1, l, r, value);
    }
    else
    {
        update(rt << 1, l, mid, value);
        update(rt << 1 | 1, mid + 1, r, value);
    }
    push_up(rt);
}
int query_sum(int rt, int l, int r)
{
    if(l == seg[rt].l && r == seg[rt].r)
    {
        return seg[rt].sum;
    }
    int mid = (seg[rt].l + seg[rt].r) >> 1;
    if(r <= mid)
    {
        return query_sum(rt << 1, l, r);
    }
    else if(l > mid)
    {
        return query_sum(rt << 1 | 1, l, r);
    }
    else
    {
        return query_sum(rt << 1, l, mid) + query_sum(rt << 1 | 1, mid + 1, r);
    }
}
int query_ans(int rt, int l, int r)
{
    if(l == seg[rt].l && r == seg[rt].r)
    {
        return seg[rt].ans;
    }
    int mid = (seg[rt].l + seg[rt].r) >> 1;
    if(r <= mid)
    {
        return query_ans(rt << 1, l, r);
    }
    else if(l > mid)
    {
        return query_ans(rt << 1 | 1, l, r);
    }
    else
    {
        return query_ans(rt << 1, l, mid) + query_ans(rt << 1 | 1, mid + 1, r);
    }
}
int main()
{
    while(~scanf("%d%d",&n,&q))
    {
        build(1, 1, n);
        int flag = 0;
        for (int i = 0; i < q; i ++) {
            int a, b, c;
            scanf("%d%d%d",&a,&b,&c);
            if(a == 1)
            {
                update(1, b, b, c);
            }
            else
            {
                int f = 0;
                int ans1 = query_sum(1, b, c);
                int ans2 = query_ans(1, b, c);
                //printf("sum = %d ans = %d\n",ans1,ans2);
                if(ans2 == 0)
                {
                    printf("Error!\n");
                    continue;
                }
                if(ans1 == 0)
                {
                    printf("0/1\n");
                    continue;
                }
                if(ans1 < 0)
                {
                    f = 1;
                    ans1 = -ans1;
                }
                int ans3 = gcd(ans1, ans2);
                if(f == 1)
                {
                    printf("-%d/%d\n",(ans1/ans3),(ans2/ans3));
                }
                else
                {
                    printf("%d/%d\n",(ans1/ans3),(ans2/ans3));
                }
            }
        }
    }
    return 0;
}
