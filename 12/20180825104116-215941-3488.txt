#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
#define int long long
const int inf = 0x3f3f3f3f3f3f3f3fll;
int n, m, u, v, T;
typedef struct NODE
{
    int to;
    int cost;
    friend bool operator < (const NODE &a, const NODE &b) {
        return a.cost > b.cost;}
}node;
typedef struct EDGE
{
    int next;
    int to;
    int w;
}edge;
edge maps[500050];
int head[100050];
int dist[100050];
int vids[100050];
int math[100050];
int cnt ;
inline void Read(int &x)
{
    char c=getchar();
    x=0;
    while (c<'0'||c>'9')
    {
        c=getchar();
    }
    while (c>='0'&&c<='9')
    {
        x=x*10+c-'0';
        c=getchar();
    }
}
inline void Out(int a)    //输出一个整型
{
    if(a<0)
    {
        putchar('-');
        a=-a;
    }
    if(a>9)
        Out(a/10);
    putchar(a%10+'0');
}
void Init()
{
    for (int i = 0; i < 100050; i ++) {
        head[i] = -1;
    }
    cnt = 0;
}
void add_edge(int u, int v, int w)
{
    maps[cnt].next = head[u];
    maps[cnt].to = v;
    maps[cnt].w = w;
    head[u] = cnt ++;
}
void dijkstra(int s, int t, int mid)
{
    priority_queue<node>que;
    while(!que.empty())
    {
        que.pop();
    }
    for (int i = 0; i < 100050; i ++) {
        vids[i] = 0;
        dist[i] = inf;
    }
    node begins;
    begins.to = s;
    begins.cost = 0;
    que.push(begins);
    while(!que.empty())
    {
        node from;
        from = que.top();
        que.pop();
        if(!vids[from.to] && math[from.to] <= mid)
        {
            vids[from.to] = 1;
            dist[from.to] = from.cost;
            for (int i = head[from.to]; ~i; i = maps[i].next) {
            int to = maps[i].to;
            int w = maps[i].w;
            if(vids[to] == 0 && math[to] <= mid)
            {
                node ends;
                ends.to = to;
                ends.cost = from.cost + w;
                que.push(ends);
            }
        }
        }
    }
}
signed main()
{
    //scanf("%lld%lld%lld%lld%lld",&n, &m, &u, &v, &T);
    Read(n);
    Read(m);
    Read(u);
    Read(v);
    Read(T);
        Init();
        //memset(math, 0, sizeof(math));
        //memset(maps, 0, sizeof(maps));
        for (int i = 1; i <= n; i ++) {
            int ans;
            //scanf("%lld",&ans);
            Read(ans);
            math[i] = ans;
        }
        for (int i = 1; i <= m; i ++) {
            int u, v, w;
            //scanf("%lld%lld%lld", &u, &v, &w);
            Read(u);
            Read(v);
            Read(w);
            add_edge(u, v, w);
            add_edge(v, u, w);
        }
        int l, r;
        l = 1;
        r = 1e9;
        int re = -1;
        while(l <= r)
        {
            int mid = (l + r) / 2;
            dijkstra(u, n, mid);
            if(dist[v] <= T)
            {
                //printf("dist[v] = %lld t = %lld\n",dist[v],T);
                re = mid;
                r = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }
        Out(re);
    return 0;
}
