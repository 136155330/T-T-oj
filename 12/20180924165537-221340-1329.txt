#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
typedef struct MYNODE
{
    int arr[4];
    int step;
}node;
char str[15];
int moves[8][4] = {{1, 0, 0, 0}, {-1, 0, 0, 0}, {0, -1, 0, 0},{0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, -1, 0}, {0, 0, 0, 1}, {0, 0, 0, -1}};
bool vids[10][10][10][10];
bool PD(int a[], int b[])
{
    for(int i = 0; i < 4; i++)
    {
        if(a[i] != b[i])
            return false;
    }
    return true;
}
queue<node>que;
int bfs(node ans, node anss)
{
    while(!que.empty())
        que.pop();
    que.push(ans);
    while(!que.empty())
    {
        node begins = que.front();
        que.pop();
        if(PD(begins.arr, anss.arr))
        {
            return begins.step;
        }
        for(int i = 0; i < 13; i ++)
        {
            if(i < 8)
            {
            node ends;
            for(int j = 0; j < 4; j ++)
            {
                ends.arr[j] = begins.arr[j] + moves[i][j];
                if(ends.arr[j] == 0)
                    ends.arr[j] = 9;
                else if(ends.arr[j] == 10)
                {
                    ends.arr[j] = 1;
                }
            }
                ends.step = begins.step + 1;
                if(!vids[ends.arr[0]][ends.arr[1]][ends.arr[2]][ends.arr[3]])
                {
                    que.push(ends);
                    vids[ends.arr[0]][ends.arr[1]][ends.arr[2]][ends.arr[3]] = 1;
                }
                else
                    continue;
            }
            else
            {
                node endss = begins;
                if(i == 8)
                {
                    swap(endss.arr[0], endss.arr[1]);
                    endss.step = endss.step + 1;
                    if(!vids[endss.arr[0]][endss.arr[1]][endss.arr[2]][endss.arr[3]])
                    {
                        que.push(endss);
                        vids[endss.arr[0]][endss.arr[1]][endss.arr[2]][endss.arr[3]] = 1;
                    }
                    else
                        continue;
                }
                if(i == 10)
                {
                    swap(endss.arr[2], endss.arr[1]);
                    endss.step = endss.step + 1;
                    if(!vids[endss.arr[0]][endss.arr[1]][endss.arr[2]][endss.arr[3]])
                    {
                        que.push(endss);
                        vids[endss.arr[0]][endss.arr[1]][endss.arr[2]][endss.arr[3]] = 1;
                    }
                    else
                        continue;
                }
                if(i == 12)
                {
                    swap(endss.arr[2], endss.arr[3]);
                    endss.step = endss.step + 1;
                    if(!vids[endss.arr[0]][endss.arr[1]][endss.arr[2]][endss.arr[3]])
                    {
                        que.push(endss);
                        vids[endss.arr[0]][endss.arr[1]][endss.arr[2]][endss.arr[3]] = 1;
                    }
                    else
                        continue;
                }
            }
        }
    }
    return 0;
}
int main()
{
    int n;
    scanf("%d",&n);
        while(n --)
        {
            memset(str, 0, sizeof(str));
            memset(vids, 0, sizeof(vids));
            scanf("%s",str);
            node a;
            int len = strlen(str);
            for(int i = 0; i < len; i ++)
            {
                a.arr[i] = str[i] - '0';
            }
            vids[a.arr[0]][a.arr[1]][a.arr[2]][a.arr[3]] = 1;
            a.step = 0;
            memset(str, 0, sizeof(str));
            scanf("%s",str);
            node b;
            for(int i = 0; i < len; i ++)
            {
                b.arr[i] = str[i] - '0';
            }
            int re = bfs(a, b);
            printf("%d\n",re);
        }
    return 0;
}
