#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;
const int MAXN = 100000 + 5;
int arr[MAXN];
ll front_sum[MAXN];///前缀和
ll ends_sum[MAXN];///后缀和
int front_finds(ll ans, int l, int r)///arr[i] sum[n - 1] / 2 - arr[i]
///返回的是小于等于sum[n - 1] / 2 - arr[i]
{
    while(l + 1 < r)
    {
        int mid = (l + r) / 2;
        if(front_sum[mid] > ans)
        {
            r = mid;
        }
        else
        {
            l = mid;
        }
    }
    return l;
}
int ends_finds(ll ans, int l, int r)///l - r 是递减
{
    while(l + 1 < r)
    {
        int mid = (l + r) / 2;
        if(ends_sum[mid] > ans)
        {
            l = mid;
        }
        else
        {
            r = mid;
        }
    }
    return r;
}
int main()
{
    int n;
    while(~scanf("%d",&n))
    {
        memset(arr, 0, sizeof(arr));
        memset(front_sum, 0, sizeof(front_sum));
        memset(ends_sum, 0, sizeof(ends_sum));
        for(int i = 0; i < n; i ++)
        {
            scanf("%d",&arr[i]);
        }
        if(n == 1)
        {
            printf("NO\n");
            continue;
        }
        front_sum[0] = arr[0];
        for(int i = 1; i < n; i ++)
        {
            front_sum[i] = front_sum[i - 1] + arr[i];
        }
        ends_sum[n - 1] = arr[n - 1];
        for(int i = n - 2; i != -1; i --)
        {
            ends_sum[i] = ends_sum[i + 1] + arr[i];
        }
        if(front_sum[n - 1] % 2 == 1)
        {
            printf("NO\n");
            continue;
        }
        bool flags = false;
        for(int i = 0; i < n; i ++)
        {
            if(front_sum[i] == front_sum[n - 1] / 2 || ends_sum[i] == front_sum[n - 1] / 2)
            {
                flags = true;
                printf("YES\n");
                break;
            }
        }
        if(flags)
            continue;
        for(int i = 0; i < n; i ++)
        {
            int ans1, ans2;
            if(i == 0)
            {
                ans1 = ends_finds(front_sum[n - 1] / 2 - arr[i], i + 1, n);
                if(ends_sum[ans1] + arr[i] == front_sum[n - 1] / 2 || ends_sum[ans1] == front_sum[n - 1] / 2)
                {
                    flags = true;
                    break;
                }
            }
            else if(i == n - 1)
            {
                ans2 = front_finds(front_sum[n - 1] / 2 - arr[i], 0, n - 1);
                if(front_sum[ans2] + arr[i] == front_sum[n - 1] / 2 || front_sum[ans2] == front_sum[n - 1] / 2)
                {
                    flags = true;
                    break;
                }
            }
            else
            {
                ans1 = front_finds(front_sum[n - 1] / 2 - arr[i], 0, i - 1);
                ans2 = ends_finds(front_sum[n - 1] / 2 - arr[i], i + 1, n);
                if(front_sum[ans1] == front_sum[n - 1] / 2 || ends_sum[ans2] == front_sum[n - 1] / 2)
                {
                    flags = true;
                    break;
                }
                if(front_sum[ans1] + arr[i] == front_sum[n - 1] / 2)
                {
                    flags = true;
                    break;
                }
                else if(ends_sum[ans2] + arr[i] == front_sum[n - 1] / 2)
                {
                    flags = true;
                    break;
                }
            }
        }
        if(flags)
            printf("YES\n");
        else
            printf("NO\n");
    }
    return 0;
}
